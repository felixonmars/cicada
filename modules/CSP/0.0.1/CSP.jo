(+jojo stop drop 'bleep)

(note process == (-> :event -- process))

(+jojo prefix (-> :event :process -- process)
  {(-> :x -- process)
   (if :x :event eq?
       then :process
       else 'bleep)})

(+jojo choice2 (-> :event1 :process1 :event2 :process2 -- process)
  {(-> :x -- process)
   (cond [:event1 :x eq?] :process1
         [:event2 :x eq?] :process2
         else 'bleep)})

(+jojo CT (note counter)
  (-> :n -- process)
  (cond [:n 0 eq?]
        ['up {1 CT apply}
         'around {0 CT apply}
         choice2]
        else
        ['up {:n inc CT apply}
         'down {:n dec CT apply}
         choice2]))

(note
  (+jojo CT
    (-> :n <nat> -- <process>)
    (cond [:n 0 eq?]
          (| up [1 CT]
             around [0 CT])
          else
          (| up [:n inc CT]
             down [:n dec CT]))))

(+jojo menu (-> :alphabet-list :process -- first-event-list)
  (cond [:alphabet-list null?] null

        [:alphabet-list .car :process apply 'bleep eq?]
        [:alphabet-list .cdr :process recur]

        else [:alphabet-list .car
              :alphabet-list .cdr :process recur
              cons]))

(note
  (run
    '(up down around)
    0 CT
    menu w)
  (run
    '(up down around)
    2 CT
    menu w))

(+jojo interact
  (-> :alphabet-list :process --)
  :alphabet-list :process menu w nl
  read-jo :jo!
  (if :jo 'end eq? then end)
  :jo :process apply :next!
  (cond [:next 'bleep eq?]
        ['bleep w nl :alphabet-list :process recur]
        else [:alphabet-list :next recur]))

(note
  (run
    '(up down around)
    0 CT
    interact))

(+jojo VMS (note vending-machine/simple)
  'coin 'choc {VMS apply}
  prefix
  prefix)

(run
  '(coin choc)
  VMS
  interact)
