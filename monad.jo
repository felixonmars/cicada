(+data <leaf> .v)
(+data <node> .l .r)

(+jojo tree-write (-> :tree :fun --)
  (case :tree
    <leaf> [:tree .v :fun apply "leaf" string-write space]
    <node> [:tree .l :fun recur
            :tree .r :fun recur "node" string-write space]))

(+jojo tree-map (-> :tree :fun -- tree)
  (case :tree
    <leaf> [:tree .v :fun apply leaf]
    <node> [:tree .l :fun recur
            :tree .r :fun recur node]))

(test

  (+jojo tree-1
    1 leaf 2 leaf node
    3 leaf 4 leaf node
    5 leaf node
    node)

  (run tree-1
    {100 add} tree-map
    {int-write space} tree-write))

(+data <nothing>)
(+data <just> .v)

(+jojo return-maybe just)

(+jojo bind-maybe (-> :m :v->m -- maybe)
  (case :m
    <nothing> nothing
    <just> [:m .v :v->m apply]))

(+jojo tree-zip (-> :t1 :t2 -- tree maybe)
  (cond
    [:t1 leaf? :t2 leaf? and]
    [:t1 .v :t2 .v cons leaf return-maybe]

    [:t1 node? :t2 node? and]
    [:t1 .l :t2 .l tree-zip
     {:l! :t1 .r :t2 .r tree-zip
      {:r! :l :r node return-maybe}
      bind-maybe}
     bind-maybe]

    else nothing))

(+jojo maybe-write (-> :m :f --)
  (case :m
    <nothing> ['nothing jo-write space]
    <just> [:m .v :f apply 'just jo-write space]))

(+jojo tree-maybe-write
  {{dup .cdr int-write space
    .car int-write space
    "cons" string-write space}
   tree-write}
  maybe-write)

(+jojo tree-2
  1 leaf 2 leaf node
  3 leaf 4 leaf node
  5 leaf node
  node)

(run tree-2 dup
  tree-zip tree-maybe-write)

(run tree-2 1 leaf
  tree-zip tree-maybe-write)

(+jojo number-tree
  (note (-> <int>, :<t> <tree> -- <int>, <int> <tree>))
  :t!
  (case :t
    <leaf> [dup inc swap leaf]
    <node> [:t .l recur :l!
            :t .r recur :r!
            :l :r node]))

(+jojo tree-2
  "1" leaf "2" leaf node
  "3" leaf "4" leaf node
  "5" leaf node
  node)

(run
  tree-2
  0 swap number-tree
  swap drop
  {int-write space} tree-write newline)

(note
  (+jojo return-list)
  (+jojo bind-list))

(note

  (+jojo bind
    (-> (: :1m [:<1> <monad>])
        (: :1-2m (-> :<1> -- :<2> <monad>))
     -- (: :2m [:<2> <monad>]))
    dummy {drop :1m} :1-2m compose apply)

  (+jojo compose
    (-> (: :0-1m (-> :<0> -- :<1> <monad>))
        (: :1-2m (-> :<1> -- :<2> <monad>))
     -- (: :0-2m (-> :<0> -- :<2> <monad>)))
    {:0-1m apply :1-2m bind}))
