#+property: tangle jojo.py
#+title: jojo

- follow the guide of EOPL

* [todo-stack]

*** jojo should be closure

    - local record
    - local point
    - local name

*** @jojo

*** @instruction

*** new version

    - separate VM and compiler
      - VM in python
      - compiler in jojo

    - compiler handles proper tail call

    - typed version of the language still compile to the VM

*** fix debug_repl

*** better p_debug

    - some call to p_debug can not return
      this should be reported to user

*** better p_step

*** trace and untrace a jojo

*** delimited continuation

    - to control rs [and ds]

*** concurrent

    - use list to implement rs and ds in jojo
      thus each group of stacks is a light weight process

* [note]

* import

  #+begin_src python
  import inspect
  import types
  #+end_src

* VM

*** VM

    #+begin_src python
    class VM:
        def __init__(self, ds, rs):
            self.ds = ds
            self.rs = rs
    #+end_src

*** JoJo

    #+begin_src python
    class JoJo:
        def __init__(self, *body):
            self.length = len(body)
            self.body = body
    #+end_src

*** RP -- return point

    #+begin_src python
    class RP:
        def __init__(self, jojo):
            self.cursor = 0
            self.jojo = jojo
    #+end_src

* exe

*** exe_one_step

    #+begin_src python
    def exe_one_step(vm):
        jojo = vm.rs.pop()
        if isinstance(jo, types.FunctionType):
            parameters = inspect.signature(jo).parameters
            length = len(parameters)
            arguments = []
            i = 0
            while i < length:
                arguments.append(vm.ds.pop())
                i = i + 1
            arguments.reverse()
            result = jo(*arguments)
            vm.ds.append(result)
        else:
            vm.ds.append(jo)
    #+end_src

*** exe

    #+begin_src python
    def exe(vm):
        while vm.rs != []:
            exe_one_step(vm)
            print (vm.ds)
    #+end_src

* [test]

*** Human

    #+begin_src python
    class Human:
        species = "H. sapiens"
        def __init__(self, name):
            self.name = name
        def say(self, msg):
            print ("{name}: {message}".format(name=self.name, message=msg))
        def sing(self):
            return 'yo... yo... microphone check... one two... one two...'
        @classmethod
        def get_species(cls):
            return cls.species
        @staticmethod
        def grunt():
            return "*grunt*"
    #+end_src

*** play

    #+begin_src python
    # def k(x, y):
    #     pass

    # def k1(x, y=1):
    #     pass

    # print(inspect.signature(k).parameters)

    # print(inspect.signature(k1).parameters)
    # print(len(inspect.signature(k1).parameters))

    # print(inspect.signature(abs).parameters)
    # print(inspect.signature(Human.say).parameters)
    #+end_src

* the story begin

  #+begin_src python
  # def add(x, y):
  #     return x + y

  # vm = VM([1, 2], JoJo(add, 3, add))

  # exe(vm)

  # print (type(vm))
  # print (type(exe))
  #+end_src
