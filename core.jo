  core-flag-on
  test-flag-on
  repl-flag-off
    (+data <null>)
    (+data <cons> .car .cdr)
    (+jojo list? (-> :x -- <bool>)
      (case :x
        <null> true
        <cons> true
        else false))
    (+jojo array->list 0 right-of-array->list)

    (+jojo right-of-array->list (-> :array :index -- list)
      (cond [:index :array array-length gteq?] [null]
            else [:array :index inc recur
                  :array :index array-ref
                  swap cons]))
    (+jojo list-spread (-> :list --)
      (case :list
        <null> []
        <cons> [:list .car :list .cdr recur]))
    (+jojo list-length (-> :list -> <int>)
      (case :list
        <null> 0
        <cons> [:list .cdr recur inc]))
    (+jojo list-any? (-> :list :pred -> <bool>)
      (cond [:list null?] [false]
            [:list .car :pred apply] [true]
            else [:list .cdr :pred recur]))
    (+jojo list-every? (-> :list :pred -> <bool>)
      (cond [:list null?] [true]
            [:list .car :pred apply not] [false]
            else [:list .cdr :pred recur]))
    (+jojo list-append (-> :left :right -> list)
      (case :left
        <null> [:right]
        <cons> [:left .cdr :right recur
                :left .car swap cons]))
    (+jojo tail-cons null cons list-append)
    (+jojo list-left (-> :list :pred -- left)
      (cond [:list null?] [null]
            [:list .car :pred apply] [null]
            else [:list .car
                  :list .cdr :pred recur
                  cons]))
    (+jojo list-right (-> :list :pred -- right)
      (cond [:list null?] [null]
            [:list .car :pred apply] [:list]
            else [:list .cdr :pred recur]))
    (+jojo list-split (-> :list :pred -- left right)
      (cond [:list null?] [null null]
            [:list .car :pred apply] [null :list]
            else [:list .car
                  :list .cdr :pred recur
                  :right! cons :right]))
    (+jojo list-map (-> :list :fun -- list)
      (case :list
        <null> null
        <cons> [:list .car :fun apply :list .cdr :fun recur cons]))
    (+jojo list-for-each (-> :list :fun --)
      (case :list
        <null> []
        <cons> [:list .car :fun apply :list .cdr :fun recur]))
    (+jojo list-filter (-> :list :pred -- list)
      (cond [:list null?] [null]
            [:list .car :pred apply] [:list .car :list .cdr :pred recur cons]
            else [:list .cdr :pred recur]))
    (+jojo list-reverse null swap list-reverse-swap-append)

    (+jojo list-reverse-swap-append (-> left :list -- list)
      (case :list
        <null> []
        <cons> [:list .car swap cons :list .cdr recur]))
    (+jojo list-write (-> :list :printer --)
      (case :list
        <null> []
        <cons> [:list .car :printer apply
                :list .cdr :printer recur]))
    (+jojo list-eqv? (-> :l1 :l2 :eqv -- <bool>)
      (cond [:l1 null? :l2 null? and] [true]
            [:l1 null?] [false]
            [:l2 null?] [false]
            [:l1 .car :l2 .car :eqv apply not] [false]
            else [:l1 .cdr :l2 .cdr :eqv recur]))
    (note sexp
      = sexp list -- <null> or <cons>
      | <string>
      | <jo>)
    (+jojo read-sexp (-> -- sexp)
      read-jo :jo!
      (cond
        [:jo round-bar eq?]
        [round-ket read-sexp-list-until-ket]

        [:jo square-bar eq?]
        ['begin square-ket read-sexp-list-until-ket cons]

        [:jo flower-bar eq?]
        ['clo flower-ket read-sexp-list-until-ket cons]

        [:jo doublequote eq?]
        [read-string]

        [:jo singlequote eq?]
        ['quote null cons recur tail-cons]

        [:jo backquote eq?]
        ['partquote null cons recur tail-cons]

        else :jo))

    (+jojo read-sexp-list-until-ket (-> :ket <jo> -- sexp list)
      read-jo :jo!
      (if :jo :ket eq?
          then null
          else :jo jo-unread read-sexp, :ket recur, cons))
    (+jojo sexp-write (-> :sexp --)
      (case :sexp
        <null> ['null jo-write]
        <cons> [round-bar jo-write :sexp sexp-list-write
                round-ket jo-write]
        <string> [doublequote jo-write :sexp string-write
                  doublequote jo-write]
        <jo> [:sexp jo-write]))

    (+jojo sexp-list-write (-> :list sexp list --)
      (cond
        [:list null?] []
        [:list .cdr null?] [:list .car sexp-write]
        else [:list .car sexp-write space
              :list .cdr recur]))
  (+jojo repl (-> :input-stack --)
    :input-stack reading-stack-push
    repl/loop
    reading-stack-drop)

  (+jojo repl/loop
    (if has-jo? not then end)
    read-sexp null cons
    compile-jojo apply
    (if repl-flag then print-data-stack)
    recur)
    (+jojo compile-jojo (-> :body -- <jojo>)
      compiling-stack-tos :address!
      :body sexp-list-compile
       emit-jojo-end
      :address new-jojo
      compiling-stack-drop :address compiling-stack-push)
    (+jojo sexp-list-compile (-> :list sexp list --)
      (case :list
        <null> []
        <cons> [:list .car sexp-compile
                :list .cdr recur]))
    (+jojo sexp-compile (-> :sexp --)
      (case :sexp
        <null>   [:sexp emit-lit]
        <cons>   [:sexp .cdr :sexp .car jo-apply]
        <string> [:sexp emit-lit]
        <jo>     [:sexp jo-compile]))
    (+jojo jo-compile (-> :jo --)
      (cond
        [:jo int-jo?] [:jo jo->int emit-lit]

        [:jo local-jo?]     [:jo jo-emit-local]
        [:jo set-local-jo?] [:jo jo-emit-set-local]

        [:jo dynamic-local-jo?]     [:jo jo-emit-dynamic-local]
        [:jo set-dynamic-local-jo?] [:jo jo-emit-set-dynamic-local]

        [:jo field-jo?]     [:jo jo-emit-field]
        [:jo set-field-jo?] [:jo jo-emit-set-field]

        [:jo comma eq?] []

        else [:jo jo-emit]))
    (+jojo quote {emit-lit} list-for-each)

    (note
      (+jojo quote {sexp-quote-compile} list-for-each)

      (+jojo sexp-quote-compile (-> :sexp --)
        (if :sexp cons?
            then :sexp sexp-list-quote-compile
            else :sexp emit-lit))

      (+jojo sexp-list-quote-compile (-> :list --)
        (cond
          [:list null?]
          [null emit-lit]

          [:list .car cons? not]
          [:list .cdr recur
           :list .car emit-lit
           'swap jo-emit
           'cons jo-emit]

          else
          [:list .cdr recur
           :list .car recur
           'swap jo-emit
           'cons jo-emit])))
    (+jojo partquote {sexp-partquote-compile} list-for-each)

    (+jojo sexp-partquote-compile (-> :sexp --)
      (if :sexp cons?
          then :sexp sexp-list-partquote-compile
          else :sexp emit-lit))

    (note this function depends on (list))

    (+jojo sexp-list-partquote-compile (-> :list --)
      (cond
        [:list null?]
        [null emit-lit]

        [:list .car cons? not]
        [:list .cdr recur
         :list .car emit-lit
         'swap jo-emit
         'cons jo-emit]

        [:list .car .car '@ eq?]
        [:list .cdr recur
         :list .car .cdr list/expend sexp-compile
         'swap jo-emit
         'list-append jo-emit]

        else
        [:list .cdr recur
         :list .car recur
         'swap jo-emit
         'cons jo-emit]))
    (+jojo if-else-then (-> :body --)
      :body {'then eq?} list-split (-> :question :then-else)
      :then-else {'else eq?} list-split (-> :then :else)
      :question sexp-list-compile
      emit-jz :address-for-jz!
      :then .cdr sexp-list-compile
      emit-jmp :address-for-jmp!
      :address-for-jz set-offset-to-here
      :else .cdr sexp-list-compile
      :address-for-jmp set-offset-to-here)

    (+jojo if-then (-> :body --)
      :body {'then eq?} list-split (-> :question :then)
      :question sexp-list-compile
      emit-jz :address-for-jz!
      :then .cdr sexp-list-compile
      :address-for-jz set-offset-to-here)

    (+jojo core-if (-> :body --)
      (cond
        [:body {'else eq?} list-any?
         :body {'then eq?} list-any? and]
        [:body if-else-then]

        [:body {'then eq?} list-any?]
        [:body if-then]

        else ["- if fail" string-write newline
              "  the body dose not has 'then" string-write newline
              "  body : " string-write :body sexp-list-write newline
              debug]))
    (+jojo core-clo
      compile-jojo emit-lit
      'current-local-env jo-emit
      'closure jo-emit)
    (+jojo cond/expend (-> :body -- sexp)
      (cond
        [:body list-length 2 eq?]
        [:body .car :body .cdr .car cond/expend-if-then
         'else tail-cons
         'cond/miss-match-report tail-cons
         'debug tail-cons]

        else
        [:body .car :body .cdr .car cond/expend-if-then
         'else tail-cons
         :body .cdr .cdr recur tail-cons]))

    (+jojo cond/miss-match-report
      "- (cond) miss match" string-write newline)

    (note
      (+jojo cond/expend-if-then (-> :question :answer -- sexp)
        `(if (@ (if :question 'else eq?
                    then 'true
                    else :question))
             then (@ :answer))))

    (+jojo cond/expend-if-then (-> :question :answer -- sexp)
      'if null cons
      (if :question 'else eq?
          then 'true
          else :question)
      tail-cons
      'then tail-cons
      :answer tail-cons)
    (+jojo arrow/expend (-> :body -- sexp)
      :body {'-- eq?} list-left
      {local-jo?} list-filter
      {local-jo->set-local-jo} list-map
      list-reverse
      'begin swap cons)
    (+jojo jo-list-compile-cells (-> :list -- <address>)
      compiling-stack-tos :address!
      :list {jo-emit} list-for-each
      emit-zero
      :address cells-copy :new-address!
      compiling-stack-drop :address compiling-stack-push
      :new-address)
    (+jojo plus-data (-> :body --)
      (if :body .car tag-jo? not then
          "- plus-data fail" string-write newline
          "  name must be of form <...>" string-write newline
          "  body : " string-write :body sexp-list-write newline
          end)

      :body .cdr
      {field-jo?} list-filter
      jo-list-compile-cells :address!

      :address :body .car name-bind-data)
    (+jojo plus-gene (-> :body --)
      :body .car :name!
      :body .cdr :rest-body!
      :body .cdr .car :arrow-sexp!

      :arrow-sexp .cdr
      {'-- eq?} list-left
      {local-jo?} list-filter
      list-length
      :name name-bind-gene

      :rest-body compile-jojo
      :name name-bind-disp-default-to-jojo)
    (+jojo plus-disp (-> :body --)
      :body .car :name!
      :body .cdr :rest-body!
      :body .cdr .car :arrow-sexp!

      :arrow-sexp .cdr
      {'-- eq?} list-left
      {tag-jo?} list-filter
      jo-list-compile-cells :address-of-tags!

      :rest-body compile-jojo
      :address-of-tags
      :name name-bind-disp-to-jojo)
    (+jojo +jojo (-> :body sexp list --)
      :body .cdr compile-jojo
      :body .car name-bind)
    reading-stack-tos repl
    (+jojo note drop)

    (+jojo begin sexp-list-compile)

    (+jojo if core-if)
    (+jojo clo core-clo)

    (+jojo cond cond/expend sexp-compile)
    (+jojo -> arrow/expend sexp-compile)

    (+jojo +data plus-data)
    (+jojo +gene plus-gene)
    (+jojo +disp plus-disp)
    (+jojo array array/expend sexp-compile)

    (+jojo array/expend (-> :body -- sexp)
      'begin null cons
      'mark tail-cons
      :body list-append
      'collect tail-cons)
    (+jojo list list/expend sexp-compile)

    (+jojo list/expend (-> :body -- sexp)
      'begin null cons
      'mark tail-cons
      :body list-append
      'collect tail-cons
      'array->list tail-cons)
    (+jojo assert assert/expend sexp-compile)

    (+jojo assert/expend (-> :body -- sexp)
      `(if (@ :body list-spread)
           then
           else
           "- assert fail" string-write newline
           "  assertion : " string-write
           (quote (@ :body)) sexp-list-write newline))

    (+jojo assert! assert!/expend sexp-compile)

    (+jojo assert!/expend (-> :body -- sexp)
      `(if (@ :body list-spread)
           then
           else
           "- assert! fail" string-write newline
           "  assertion : " string-write
           (quote (@ :body)) sexp-list-write newline
           debug))
    (+jojo test (-> :body --)
      (if test-flag then :body begin))
    (note example
      (let-bind bind-maybe
        :l [:t1 .l :t2 .l zip-tree]
        :r [:t1 .r :t2 .r zip-tree]
        [:l :r node return-maybe])
      (begin
        [:t1 .l :t2 .l tree-zip]
        {:l! [:t1 .r :t2 .r zip-tree]
         {:r! [:l :r node return-maybe]}
         bind-maybe}
        bind-maybe)
      (begin
        [:t1 .l :t2 .l tree-zip] {:l!
        [:t1 .r :t2 .r zip-tree] {:r!
        [:l :r node return-maybe]} bind-maybe} bind-maybe))

    (+jojo let-bind let-bind/expend sexp-compile)

    (+jojo let-bind/expend (-> :body -- sexp)
      :body .car :body .cdr let-bind/expend-recur)

    (+jojo let-bind/expend-recur (-> :binder :rest -- sexp)
      (cond
        [:rest list-length 1 eq?]
        [:rest .car]

        [:rest .car local-jo?]
        `[(@ :rest .cdr .car)
          {(@ :rest .car local-jo->set-local-jo
              :binder :rest .cdr .cdr recur)}
          (@ :binder)]

        else
        `[(@ :rest .car)
          {drop
           (@ :binder :rest .cdr recur)}
          (@ :binder)]))
    (+jojo case case/expend sexp-compile)

    (+jojo case/expend (-> :body -- sexp)
      `(begin (list (@ :body .car)) {tag} list-map
         (@ :body .cdr case/expend-rest)))

    (+jojo case/expend-rest (-> :body -- sexp)
      (cond
        [:body list-length 2 eq?]
        [:body .car :body .cdr .car case/expend-if-then
         `(else "- (case) miss match" string-write newline
                debug)
         list-append]

        else
        [:body .car :body .cdr .car case/expend-if-then
         `(else (@ :body .cdr .cdr recur))
         list-append]))

    (+jojo case/expend-if-then (-> :tags :answer -- sexp)
      (cond [:tags 'else eq?]
            `(if true
                 then drop (@ :answer))
            [:tags cons?]
            `(if dup (quote (@ :tags .cdr)) {case/match?} list-eqv?
                 then drop (@ :answer))
            else
            `(if dup .car (quote (@ :tags)) case/match?
                 then drop (@ :answer))))

    (+jojo case/match? (-> :tag1 :tag2 -- <bool>)
      (cond [:tag1 underscore-jo?] [true]
            [:tag2 underscore-jo?] [true]
            else [:tag1 :tag2 eq?]))
    (test
      (assert
        mark 0 1 2 3 4 collect
        array->list
        (list 0 1 2 3 4)
        {eq?} list-eqv?)
      (assert
        (list 0 1 2 3 4)
        (list 5 6 7 8 9)
        list-append
        (list 0 1 2 3 4 5 6 7 8 9)
        {eq?} list-eqv?)
      (assert
        (list 0 1 2 3 4 5 6 7 8 9)
        {5 gteq?} list-left
        (list 0 1 2 3 4)
        {eq?} list-eqv?)
      (assert
        (list 0 1 2 3 4 5 6 7 8 9)
        {5 gteq?} list-split
        swap (list 0 1 2 3 4) {eq?} list-eqv?
        swap (list 5 6 7 8 9) {eq?} list-eqv?
        and)
      (assert
        (list 0 1 2 3 4 5 6 7 8 9)
        {inc} list-map
        (list 1 2 3 4 5 6 7 8 9 10)
        {eq?} list-eqv?)
      (assert
        (list 0 1 2 3 4 5 6 7 8 9)
        {2 mod 0 eq?} list-filter
        (list 0 2 4 6 8)
        {eq?} list-eqv?)
      (assert
        (list 0 1 2 3 4 5 6 7 8 9)
        list-reverse
        (list 9 8 7 6 5 4 3 2 1 0)
        {eq?} list-eqv?))
    (test
      (+jojo square dup mul)
      (assert 2 square 4 eq?))
    (test
      (+jojo list-length/cond
        :list!
        (cond
          [:list null?] [0]
          else [:list .cdr recur inc]))
      (assert (list 1 2 3 4 5) list-length/cond 5 eq?))
    (test
      (+jojo com (-> :m1 :m2 -- jojo)
        {:m1 apply :m2 apply})
      (assert {1} {2} com apply add 3 eq?)
      (assert {1} {2} com {3} com apply add add 6 eq?)
      (assert {1} {2} {3} com com apply add add 6 eq?))
    (test
      (+gene add-two (-> :x :y --) 0)
      (+disp add-two (-> <string> <int> --) swap string-length add)
      (+disp add-two (-> <int> <string> --) string-length add)
      (+disp add-two (-> <int> <int> --) add)
      (+disp add-two (-> <string> <string> --)
        string-length swap string-length add)

      (assert "123" 3 add-two 6 eq?)
      (assert 3 "123" add-two 6 eq?)
      (assert 3 3 add-two 6 eq?)
      (assert "123" "123" add-two 6 eq?)
      (assert '123 "123" add-two 0 eq?))
    (test
      (+jojo one-two-three 'one 'two 'three)
      (+jojo one-two-three-list '(one two three))
      (assert
        '(1 2 3)
        '(1 2 3)
        {eq?} list-eqv?)
      (assert
        `(1 2 3 (@ one-two-three) 1 2 3)
        '(1 2 3 one two three 1 2 3)
        {eq?} list-eqv?)
      (assert
        `(1 2 3 (@ one-two-three-list list-spread) 1 2 3)
        '(1 2 3 one two three 1 2 3)
        {eq?} list-eqv?)
      (assert
        `(((@ 1))) .car .car
        1 eq?)
      (assert
        `(((@ `(((@ 1)))))) .car .car .car .car
        1 eq?))
    (test
      (+jojo list-length/case
        :list!
        (case :list
          <null> 0
          <cons> [:list .cdr recur inc]))
      (assert (list 1 2 3 4 5) list-length/case 5 eq?))
    (test
      (+jojo fun-1
        ::dynamic-local)
      (+jojo fun-2
        'dynamic-of-fun-2 ::dynamic-local!
        fun-1
        nop)
      (assert
        'dynamic-of-fun-2 fun-2 eq?)
      (assert
        'dynamic-of-top-begin ::dynamic-local!
        fun-2
        fun-1
        swap 'dynamic-of-fun-2 eq?
        swap 'dynamic-of-top-begin eq?
        and))
    (note

      (+jojo bind
        (-> (: :1m [:<1> <monad>])
            (: :1-2m (-> :<1> -- :<2> <monad>))
         -- (: :2m [:<2> <monad>]))
        dummy {drop :1m} :1-2m compose apply)

      (+jojo compose
        (-> (: :0-1m (-> :<0> -- :<1> <monad>))
            (: :1-2m (-> :<1> -- :<2> <monad>))
         -- (: :0-2m (-> :<0> -- :<2> <monad>)))
        {:0-1m apply :1-2m bind}))
    (+data <nothing>)
    (+data <just> .v)

    (+jojo return-maybe just)

    (+jojo bind-maybe (-> :m :v->m -- maybe)
      (case :m
        <nothing> nothing
        <just> [:m .v :v->m apply]))
    (note
      (+jojo return-list)
      (+jojo bind-list))
    (test

      (+data <leaf> .v)
      (+data <node> .l .r)

      (+jojo tree-1
        1 leaf 2 leaf node
        3 leaf 4 leaf node
        5 leaf node
        node))
    (test

      (+jojo tree-map (-> :tree :fun -- tree)
        (case :tree
          <leaf> [:tree .v :fun apply leaf]
          <node> [:tree .l :fun recur
                  :tree .r :fun recur node]))

      (+jojo tree-eqv? (-> :t1 :t2 :eqv --)
        (case [:t1 :t2]
          [<leaf> <leaf>] [:t1 .v :t2 .v :eqv apply]
          [<node> <node>] (if :t1 .l :t2 .l :eqv recur not
                              then false
                              else :t1 .r :t2 .r :eqv recur)
          else false))

      (assert
        tree-1 {100 add} tree-map

        101 leaf 102 leaf node
        103 leaf 104 leaf node
        105 leaf node
        node

        {eq?} tree-eqv?))
    (test

      (+jojo tree-zip (-> :t1 :t2 -- tree maybe)
        (case [:t1 :t2]
          [<leaf> <leaf>] [:t1 .v :t2 .v cons leaf return-maybe]
          [<node> <node>] (let-bind bind-maybe
                            :l [:t1 .l :t2 .l tree-zip]
                            :r [:t1 .r :t2 .r tree-zip]
                            [:l :r node return-maybe])
          else nothing))

      (+jojo maybe-write (-> :m :f --)
        (case :m
          <nothing> ['nothing jo-write space]
          <just> [:m .v :f apply 'just jo-write space]))

      (assert
        tree-1 dup tree-zip tag '<just> eq?)

      (+jojo tree-2
        1 1 cons leaf 2 2 cons leaf node
        3 3 cons leaf 4 4 cons leaf node
        5 5 cons leaf node
        node)

      (assert
        tree-1 dup tree-zip .v
        tree-2
        { (-> :c1 :c2)
          :c1 .car :c2 .car eq?
          :c1 .cdr :c2 .cdr eq? and
        } tree-eqv?)

      (assert
        tree-1 1 leaf tree-zip nothing?))
    (test

      (+jojo number-tree (-> number, :tree -- number, tree)
        (case :tree
          <leaf> [dup inc swap leaf]
          <node> [:tree .l recur :l!
                  :tree .r recur :r!
                  :l :r node]))

      (+jojo tree-3
        "1" leaf "2" leaf node
        "3" leaf "4" leaf node
        "5" leaf node
        node)

      (assert
        0 tree-3 number-tree swap drop
        tree-1 {dec} tree-map
        {eq?} tree-eqv?))
    (+jojo times (-> :fun :n --)
      (if :n 0 lteq? then end)
      :fun apply
      :fun :n dec recur)
    (+jojo cmd-list 0 cmd-list/loop)

    (+jojo cmd-list/loop (-> :index --)
      (cond [:index cmd-number eq?] null
            else [:index index->cmd-string
                  :index inc recur
                  cons]))
    (+jojo maybe-drop-shabang (-> :input-stack -- <input-stack>)
      :input-stack reading-stack-push
      read-line :line!
      (cond [:line string-length 3 lteq?] [:line string-unread]
            [:line 0 2 string-slice "#!" string-eq?] []
            else [:line string-unread])
      reading-stack-pop)
    (+jojo path-load (-> :path --)
      :path path-open-read
      (if not then
          "- path-load fail" string-write newline
          "  path : " string-write :path string-write newline
          "  " string-write error-number-print newline
          debug)
      file-input-stack
      maybe-drop-shabang
      repl)
    (+jojo welcome-to-jojo
      "welcome to jojo's programming adventure ^-^/" string-write newline)
    (+jojo the-story-begin
      core-flag-off
      test-flag-off
      repl-flag-off

      (cond
        [cmd-number 1 eq?]
        [repl-flag-on
         welcome-to-jojo
         print-data-stack
         terminal-input-stack repl
         end]

        else
        [cmd-list .cdr .car path-load
         bye]))

    the-story-begin
