      (note
        (+jojo zip-tree :t1! :t2!
          (note [tree tree] -> [maybe-tree])
          (cond [:t1 leaf? :t2 leaf? and]
                [:t1 .v :t2 .v cons leaf return-maybe]
                [:t1 node? :t2 node? and]
                (let-bind bind-maybe
                  :l [:t1 .l :t2 .l zip-tree]
                  :r [:t1 .r :t2 .r zip-tree]
                  [:l :r node return-maybe])
                else nothing)))
  (run core-flag-on)
    (+data <null>)
    (+data <cons> .car .cdr)
    (+jojo list-member? (-> :a :list -- <bool>)
      (case :list
        <null> false
        <cons> [(if :a :list .car eq? then true end)
                :a :list .cdr recur]))
    (+jojo list-append (-> :left :right -> list)
      (case :left
        <null> [:right]
        <cons> [:left .cdr :right recur
                :left .car swap cons]))
    (+jojo list-left (-> :list :pred -- left)
      (cond [:list null?] [null]
            [:list .car :pred apply] [null]
            else [:list .car
                  :list .cdr :pred recur
                  cons]))
    (+jojo list-right (-> :list :pred -- right)
      (cond [:list null?] [null]
            [:list .car :pred apply] [:list]
            else [:list .cdr :pred recur]))
    (+jojo list-split (-> :list :pred -- left right)
      (cond [:list null?] [null null]
            [:list .car :pred apply] [null :list]
            else [:list .car
                  :list .cdr :pred recur
                  :right! cons :right]))
    (+jojo int-list-write
      "'" string-write
      round-bar jo-write space
      int-list-write/loop
      round-ket jo-write space)

    (+jojo int-list-write/loop (-> :list --)
      (case :list
        <null> [space]
        <cons> [:list .car int-write space
                :list .cdr recur]))

    (run
      0 1 2 3 4 null
      cons cons cons cons cons

      5 6 7 8 9 null
      cons cons cons cons cons

      list-append
      int-list-write newline)

    (run
      0 1 2 3 4 5 6 7 8 9 null
      cons cons cons cons cons
      cons cons cons cons cons

      {5 gt?} list-left
      int-list-write newline)

    (run
      0 1 2 3 4 5 6 7 8 9 null
      cons cons cons cons cons
      cons cons cons cons cons

      {5 gteq?} list-split
      int-list-write int-list-write newline)
    (note atom of jexp can only be <string> and <jo>)
    (note jexp
      = <cons> -- jexp list
      | <square-bar-ket> -- jexp list square-bar-ket
      | <flower-bar-ket> -- jexp list flower-bar-ket
      | <string>
      | <jo>)

    (+data <square-bar-ket> .list)
    (+data <flower-bar-ket> .list)
    (+jojo read-jexp (-> -- jexp)
      read-jo :jo!
      (cond [:jo round-bar eq?] [round-ket read-jexp/list]
            [:jo square-bar eq?] [square-ket read-jexp/list square-bar-ket]
            [:jo flower-bar eq?] [flower-ket read-jexp/list flower-bar-ket]
            [:jo doublequote eq?] [read-string]
            else [:jo]))

    (+jojo read-jexp/list (-> :ket <jo> -- jexp list)
      read-jo :jo!
      (if :jo :ket eq?
          then null
          else :jo jo-unread read-jexp, :ket recur, cons))
    (+jojo jexp-write (-> :jexp --)
      (case :jexp
        <cons>  [round-bar jo-write space
                 :jexp jexp-list-write
                 round-ket jo-write space]
        <square-bar-ket> [square-bar jo-write space
                          :jexp .list jexp-list-write
                          square-ket jo-write space]
        <flower-bar-ket> [flower-bar jo-write space
                          :jexp .list jexp-list-write
                          flower-ket jo-write space]
        <string> [doublequote jo-write
                  :jexp string-write
                  doublequote jo-write space]
        <jo> [:jexp jo-write space]))

    (+jojo jexp-list-write (-> :list jexp list --)
      (case :list
        <null> [space]
        <cons> [:list .car jexp-write :list .cdr recur]))
    (+jojo repl (-> :input-stack --)
      :input-stack reading-stack-push
      repl/loop
      reading-stack-drop)

    (+jojo repl/loop
      (if has-jo? not then end)
      read-jo :jo!
      (if :jo round-bar eq? then
          read-jo
          round-bar jo-unread read-jexp
          (note (-> jexp list -- [compiling-stack]))
          swap jo-apply)
      (if repl-flag then print-data-stack)
      recur)
    (+jojo compile-jojo (-> jexp list -- <jojo>)
      compiling-stack-tos-as-jojo
      swap jexp-list-compile
      'end jo-emit-call
      0 int-emit-data
      0 int-emit-data)
    (+jojo jexp-list-compile (-> :list jexp list --)
      (if :list null? then end)
      :list .car jexp-compile
      :list .cdr recur)
    (+jojo jexp-compile (-> :jexp --)
      (cond
        [:jexp cons?]
        [:jexp .cdr dup jexp-list-write newline
         :jexp .car dup jo-write newline
         jo-apply]

        [:jexp square-bar-ket?] []

        [:jexp flower-bar-ket?] []

        [:jexp string?] [:jexp emit-lit]

        [:jexp jo?] [:jexp jo-compile]))
    (+jojo jo-compile (-> :jo --)
      (cond [:jo int-jo?]       [:jo jo->int emit-lit]
            [:jo get-local-jo?] [:jo jo-emit-get-local]
            [:jo set-local-jo?] [:jo jo-emit-set-local]
            [:jo get-field-jo?] [:jo jo-emit-get-field]
            [:jo set-field-jo?] [:jo jo-emit-set-field]
            else [:jo jo-emit-call]))
    (+jojo if-else-then (-> :body --)
      :body {'then eq?} list-split (-> :question :then-else)
      :then-else {'else eq?} list-split (-> :then :else)
      :question jexp-list-compile
      emit-jz :jz-address!
      :then .cdr jexp-list-compile
      emit-jmp :jmp-address!
      :jz-address set-offset-to-here
      :else .cdr jexp-list-compile
      :jmp-address set-offset-to-here)

    (+jojo if-then (-> :body --)
      :body {'then eq?} list-split (-> :question :then)
      :question jexp-list-compile
      emit-jz :jz-address!
      :then .cdr jexp-list-compile
      :jz-address set-offset-to-here)

    (+jojo core-if (-> :body --)
      (cond
        ['else :body list-member?
         'then :body list-member? and]
        [:body if-else-then]

        ['then :body list-member?] [:body if-then]

        else ["- if fail" string-write newline
              "  the body dose not has 'then" string-write newline
              "  body : " string-write :body jexp-list-write newline
              debug]))
    (+jojo +jojo (-> :body jexp list --)
      :body .car,  (note dup jo-write newline)
      :body .cdr   (note dup jexp-list-write newline)
      compile-jojo,
      bind-name)
    (run reading-stack-tos repl)
    (+jojo if core-if)
    (+jojo run compile-jojo apply)
    (+jojo note drop)
  (+jojo square dup mul)
  (run 123 square int-write newline)
  (+jojo the-story-begin
    repl-flag-on terminal-input-stack repl)
  (run the-story-begin)
