#+title: examples

* [todo-stack]

* [note]

*** naming convention

    - type

      | -t  | type constructor          |
      | -u  | union-type constructor    |
      | -q  | quotient-type constructor |
      | -tc | type-class                |
      | -tt | type of type              |

    - function

      | -p  | predicate        |
      | -c  | data constructor |
      | -cr | create           |

* bool

*** bool-u

    #+begin_src cicada
    (+union bool-u : type-tt
      (-> -- true-t)
      (-> -- false-t))
    #+end_src

* nat

*** nat-u

    #+begin_src cicada
    (+union nat-u : type-tt
      (-> -- zero-t)
      (-> prev : nat-u -- succ-t))

    (+fun nat-add : (-> [m n] : nat-u -- nat-u)
      (case n
        (zero-t m)
        (succ-t m n.prev recur succ-c)))

    (+fun nat-mul : (-> [m n] : nat-u -- nat-u)
      (case n
        (zero-t n)
        (succ-t m n.prev recur m nat-add)))

    (+fun nat-factorial : (-> n : nat-u -- nat-u)
      (case n
        (zero-t n succ-c)
        (succ-t n.prev recur n nat-mul)))
    #+end_src

* list

*** list-u

    #+begin_src cicada
    (+union list-u : (-> type : type-tt -- type-tt)
      (-> -- type null-t)
      (-> car : type
          cdr : [type list-u]
       -- type cons-t))
    #+end_src

*** list-u -- not inline

    #+begin_src cicada
    (+union list-u : (-> type-tt -- type-tt)
      null-t
      cons-t)

    (+type null-t : (-> type : type-tt -- type-tt)
      (-> -- type null-t))

    (+type cons-t : (-> type : type-tt -- type-tt)
      (-> car : type
          cdr : [type cons-t]
       -- type cons-t))
    #+end_src

*** list-length

    #+begin_src cicada
    (+fun list-length : (-> l : [:t list-u] -- nat-u)
      (case l
        (null-t zero-c)
        (cons-t l.cdr recur succ-c)))
    #+end_src

*** list-map

    #+begin_src cicada
    (+fun list-map
      : (-> l : [:t1 list-u]
            fun : (-> :t1 -- :t2)
         -- :t2 list-u)
      (case l
        (null-t null-c)
        (cons-t l.car fun l.cdr {fun} recur cons-c)))
    #+end_src

*** list-ref -- will not pass type check

    #+begin_src cicada
    ;; this function will not pass type check
    ;;   because we can not use car cdr on list-u
    ;;   we can only use them on cons-t
    (+fun list-ref
      : (-> l : [:t list-u], index : nat-u -- :t)
      (case index
        (zero-t l.car)
        (succ-t l.cdr index.prev recur)))
    #+end_src

*** list-remove-first

    #+begin_src cicada
    (+fun list-remove-first
      : (-> x : :t, l : [:t list-u]
         -- :t list-u)
      (case l
        (null-t null-c)
        (cons-t (case [l.car x eq-p]
                   (true-t  l.cdr)
                   (false-t l.car l.cdr x recur cons)))))
    #+end_src
