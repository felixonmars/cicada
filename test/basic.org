#+title: basic

* <cons>

  #+begin_src jojo
  (+data <null>)
  (+data <cons> .cdr .car)

  (+var a-list
    null
    1 cons
    2 cons)

  (+jojo list-print :f! :l!
    (case :l
      null ["null " string-write]
      cons [:l .cdr :f (recur)
            :l .car :f apply " " string-write
            "cons " string-write]))

  (run a-list (# int-write) list-print)
  #+end_src

* <closure>

  #+begin_src jojo
  (+jojo t0 1 :a! 2 :b! (# :a :b add))
  (+var x0 t0)
  (run x0)

  (+jojo t1 1 :a! 2 :b! (# :a (# :b)))
  (+var x1 t1)
  (run x1)
  (+var x2 1)
  (run x2! x2)
  #+end_src

* <socket>

*** server

    #+begin_src jojo
    (+var server "8888" 5 tcp-socket-listen)
    (+jojo run-server
      server socket-accept :addr! :client!
      "got a connection from " string-write :addr string-write newline
      :client "thank you for connecting" socket-send
      :client close (loop))
    (run run-server)
    #+end_src

*** client

    #+begin_src jojo
    (+var clinet "cicada" "8888" tcp-socket-connect)
    (+jojo run-clinet
      clinet socket-recv string-write newline)
    (run run-clinet)
    #+end_src

* <monad>

  #+begin_src jojo
  (+data <nothing>)
  (+data <just> .it)

  (+data <leaf> .value)
  (+data <node> .left .right)

  (+var a-tree
    1 leaf 2 leaf node
    3 leaf 4 leaf node
    5 leaf node
    node)

  (+jojo tree-write :f! :t!
    (note [tree fun] -> [])
    (case :t
      leaf [:t .value :f apply " leaf " string-write]
      node [:t .left :f (recur)
            :t .right :f (recur) "node " string-write]))

  (+jojo tree-map :f! :t!
    (note [tree fun] -> [tree])
    (case :t
      leaf [:t .value :f apply leaf]
      node [:t .left :f (recur)
            :t .right :f (recur) node]))

  (run a-tree
    (# 100 add) tree-map
    (# int-write) tree-write)

  (+jojo zip-tree :t1! :t2!
    (note [tree tree] -> [maybe-tree])
    (cond
      [:t1 leaf? :t2 leaf? and] []
      [:t1 node? :t2 node? and] []
      else []))
  #+end_src
