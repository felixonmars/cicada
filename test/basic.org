#+title: basic

* <cons>

  #+begin_src jojo
  (+data <null>)
  (+data <cons> .cdr .car)

  (+var a-list
    null
    1 cons
    2 cons)

  (+jojo list-print :l!
    (case :l
      null ["null " string-write]
      cons [:l .cdr (recur)
            :l .car int-write " " string-write
            "cons " string-write]))

  (run a-list list-print)
  #+end_src

* <closure>

  #+begin_src jojo
  (+jojo t0 1 :a! 2 :b! (jojo :a :b add))
  (+var x0 t0)
  (run x0)

  (+jojo t1 1 :a! 2 :b! (jojo :a (jojo :b)))
  (+var x1 t1)
  (run x1)
  (+var x2 1)
  (run x2! x2)
  #+end_src

* *control*

  #+begin_src jojo
  (+jojo t2
    (if 1 eq? then 111 end)
    222)

  (run 1 t2 int-write)
  (run 2 t2 int-write)

  (+jojo l0 :x!
    (if :x 0 eq? then end)
    (el :x int-write " " string-write :x dec (loop)))

  (run 1000 l0)

  (+jojo l1 :x!
    (if :x 0 eq? then end)
    (el :x int-write " " string-write :x dec (recur)))

  (run 1000 l1)
  #+end_src

* <socket>

*** server

    #+begin_src jojo
    (+var server "8888" 5 tcp-socket-listen)
    (+jojo run-server
      server socket-accept :addr! :client!
      "got a connection from " string-write :addr string-write newline
      :client "thank you for connecting" socket-send
      :client close (loop))
    (run run-server)
    #+end_src

*** client

    #+begin_src jojo
    (+var clinet "cicada" "8888" tcp-socket-connect)
    (+jojo run-clinet
      clinet socket-recv string-write newline)
    (run run-clinet)
    #+end_src

* <monad>

*** maybe

    #+begin_src jojo
    (note maybe)
    (+data <nothing>)
    (+data <just> .it)

    (note tree)
    (+data <leaf> .value)
    (+data <node> .left .right)

    (+var a-tree
      1 leaf 2 leaf node
      3 leaf 4 leaf node
      5 leaf node
      node)

    (+jojo tree-write :t!
      (case :t
        leaf [:t .value int-write " leaf " string-write]
        node [:t .left (recur)
              :t .right (recur) "node " string-write]))

    (note
      (+jojo tree-map :t!
        (case :t
          leaf []
          node [])))

    (run a-tree tree-write)
    #+end_src
