* play
*** p1

    #+begin_src c
    void p1() {
      int file = open("README", O_RDWR);
      struct input_stack* t0_stack = file_input_stack(file);
      input_stack_push(t0_stack, '\n');
      input_stack_push(t0_stack, '\n');
      input_stack_push(t0_stack, '1');
      input_stack_push(t0_stack, '2');
      input_stack_push(t0_stack, '3');
      input_stack_push(t0_stack, '4');
      input_stack_push(t0_stack, '\n');
      input_stack_push(t0_stack, '\n');
      while (!input_stack_empty_p(t0_stack)) {
        report("%c", input_stack_pop(t0_stack));
      }
      input_stack_free(t0_stack);
      report("- input_stack test0 finished\n");

      struct input_stack* t1_stack = terminal_input_stack();
      while (!input_stack_empty_p(t1_stack)) {
        char byte = input_stack_pop(t1_stack);
        report("\n> %c", byte);
      }
      input_stack_free(t1_stack);
      report("- input_stack test1 finished\n");

      struct input_stack* t2_stack = string_input_stack("1234567890");
      input_stack_push(t2_stack, '\n');
      input_stack_push(t2_stack, '\n');
      input_stack_push(t2_stack, '1');
      input_stack_push(t2_stack, '2');
      input_stack_push(t2_stack, '3');
      input_stack_push(t2_stack, '4');
      input_stack_push(t2_stack, '\n');
      input_stack_push(t2_stack, '\n');
      while (!input_stack_empty_p(t2_stack)) {
        char byte = input_stack_pop(t2_stack);
        report("%c", byte);
      }
      input_stack_free(t2_stack);
      report("\n");
      report("- input_stack test2 finished\n");
    }
    #+end_src

*** p2

    #+begin_src c
    void p2() {
      int file = open("k1~",
                      (O_CREAT | O_RDWR),
                      (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH));

      struct output_stack* t0_stack = file_output_stack(file);
      output_stack_push(t0_stack, '1'); output_stack_pop(t0_stack);
      output_stack_push(t0_stack, '2');
      output_stack_push(t0_stack, '3'); output_stack_drop(t0_stack);
      output_stack_push(t0_stack, '4');
      output_stack_push(t0_stack, '\n');
      file_output_stack_flush(t0_stack);
      output_stack_push(t0_stack, '1');
      output_stack_push(t0_stack, '2'); output_stack_pop(t0_stack);
      output_stack_push(t0_stack, '3');
      output_stack_push(t0_stack, '4'); output_stack_drop(t0_stack);
      output_stack_push(t0_stack, '\n');
      file_output_stack_flush(t0_stack);
      output_stack_free(t0_stack);
      close(file);
      report("- output_stack test0 finished\n");

      struct output_stack* t1_stack = terminal_output_stack();
      output_stack_push(t1_stack, '\n');
      output_stack_push(t1_stack, '\n');
      output_stack_push(t1_stack, '1');
      output_stack_push(t1_stack, '2');
      output_stack_push(t1_stack, '3');
      output_stack_push(t1_stack, '4');
      output_stack_push(t1_stack, '\n');
      output_stack_push(t1_stack, '\n');
      output_stack_free(t1_stack);
      report("- output_stack test1 finished\n");

      struct output_stack* t2_stack = string_output_stack();
      output_stack_push(t2_stack, '1');
      output_stack_push(t2_stack, '2');
      report("- %c\n", output_stack_pop(t2_stack));
      output_stack_push(t2_stack, '3');
      output_stack_push(t2_stack, '4');
      report("- %c\n", output_stack_pop(t2_stack));
      output_stack_push(t2_stack, '\n');
      char* collected_string = string_output_stack_collect(t2_stack);
      report("- collected_string : %s\n", collected_string);
      output_stack_free(t2_stack);
      report("- output_stack test2 finished\n");
    }
    #+end_src

*** p3

    #+begin_src c
    void p3() {
      struct disp* disp_1 = new_disp(16);
      disp_insert(disp_1, str2jo("k1"), TAG_INT, 100);
      disp_insert(disp_1, str2jo("k1"), TAG_INT, 1);
      disp_insert(disp_1, str2jo("k2"), TAG_INT, 2);
      disp_insert(disp_1, str2jo("k3"), TAG_INT, 3);
      disp_insert(disp_1, str2jo("k4"), TAG_INT, 4);
      disp_insert(disp_1, str2jo("k5"), TAG_INT, 5);
      disp_insert(disp_1, str2jo("k6"), TAG_INT, 6);

      disp_insert(disp_1, str2jo("kkkk1"), TAG_INT, 1);
      disp_insert(disp_1, str2jo("kkkk2"), TAG_INT, 2);
      disp_insert(disp_1, str2jo("kkkk3"), TAG_INT, 3);
      disp_insert(disp_1, str2jo("kkkk4"), TAG_INT, 4);
      disp_insert(disp_1, str2jo("kkkk5"), TAG_INT, 5);
      disp_insert(disp_1, str2jo("kkkk6"), TAG_INT, 6);

      disp_insert(disp_1, str2jo("1"), TAG_INT, 666);
      disp_insert(disp_1, str2jo("2"), TAG_INT, 2);
      disp_insert(disp_1, str2jo("3"), TAG_INT, 3);
      disp_insert(disp_1, str2jo("4"), TAG_INT, 4);
      disp_insert(disp_1, str2jo("5"), TAG_INT, 5);
      disp_insert(disp_1, str2jo("6"), TAG_INT, 6);

      disp_print(disp_1);

      struct disp_entry* disp_entry_1 =
        disp_find(disp_1, str2jo("1"));
      if (disp_entry_1 == 0) {
        report("disp_entry_1 is empty\n");
      }
      else {
        report("disp_entry_1->tag : %s\n", jo2str(disp_entry_1->tag));
        report("disp_entry_1->data : %ld\n", disp_entry_1->data);
      }

      // void* p = 0;
      // printf("- in c stack : %p\n", (void*)&p);
      report("0: %ld\n", 0);
      report("sizeof(struct jotable_entry): %ld\n", sizeof(struct jotable_entry));
    }
    #+end_src

*** p4

    #+begin_src c
    void p4() {
      struct multi_disp* multi_disp_1 = new_multi_disp(16);
      multi_disp_insert(multi_disp_1, J("k1", "k1"), TAG_INT, 100);
      multi_disp_insert(multi_disp_1, J("k1", "k1"), TAG_INT, 1);
      multi_disp_insert(multi_disp_1, J("k21", "k22"), TAG_INT, 2);
      multi_disp_insert(multi_disp_1, J("k31", "k32", "k33"), TAG_INT, 3);
      multi_disp_insert(multi_disp_1, J("k4"), TAG_INT, 4);
      multi_disp_insert(multi_disp_1, J("k5"), TAG_INT, 5);
      multi_disp_insert(multi_disp_1, J("k6"), TAG_INT, 6);

      multi_disp_insert(multi_disp_1, J("kkkk1"), TAG_INT, 1);
      multi_disp_insert(multi_disp_1, J("kkkk2"), TAG_INT, 2);
      multi_disp_insert(multi_disp_1, J("kkkk3"), TAG_INT, 3);
      multi_disp_insert(multi_disp_1, J("kkkk4"), TAG_INT, 4);
      multi_disp_insert(multi_disp_1, J("kkkk5"), TAG_INT, 5);
      multi_disp_insert(multi_disp_1, J("kkkk6"), TAG_INT, 6);

      multi_disp_insert(multi_disp_1, J("1", "2", "3"), TAG_INT, 666);
      multi_disp_insert(multi_disp_1, J("2"), TAG_INT, 2);
      multi_disp_insert(multi_disp_1, J("3"), TAG_INT, 3);
      multi_disp_insert(multi_disp_1, J("4"), TAG_INT, 4);
      multi_disp_insert(multi_disp_1, J("5"), TAG_INT, 5);
      multi_disp_insert(multi_disp_1, J("6"), TAG_INT, 6);

      multi_disp_print(multi_disp_1);

      struct multi_disp_entry* multi_disp_entry_1 =
        multi_disp_find(multi_disp_1, J("1", "2", "3"));
      if (multi_disp_entry_1 == 0) {
        report("multi_disp_entry_1 is empty\n");
      }
      else {
        report("multi_disp_entry_1->tag : %s\n", jo2str(multi_disp_entry_1->tag));
        report("multi_disp_entry_1->data : %ld\n", multi_disp_entry_1->data);
      }

      struct multi_disp_entry* multi_disp_entry_2 =
        multi_disp_find(multi_disp_1, J("1", "2", "3123"));
      if (multi_disp_entry_2 == 0) {
        report("multi_disp_entry_2 is empty\n");
      }
      else {
        report("multi_disp_entry_2->tag : %s\n", jo2str(multi_disp_entry_2->tag));
        report("multi_disp_entry_2->data : %ld\n", multi_disp_entry_2->data);
      }
    }
    #+end_src

*** p5

    #+begin_src c
    void p5() {
      report("sizeof(cell) : %ld\n", sizeof(cell));
      report("sizeof(jo_t) : %ld\n", sizeof(jo_t));
    }
    #+end_src
