(~ square (: int int -> int)
   dup mul end)

(~ t (: ->)
   (# 11) square .
   end)
t

(~ stack-repl (: [io] -> *)
   read-symbol apply
   print-stack
   (tail-call stack-repl))

stack-repl

(~ t (: ->)
   (if true -> true . end)
   (if false -> false . end))
t

(~ factorial (: int -> int)
   (if dup (# 1) lteq? -> drop (# 1) end)
   dup (# 1) sub factorial mul end)

(~ t (: ->)
   (# 0) factorial .
   (# 1) factorial .
   (# 2) factorial .
   (# 3) factorial .
   (# 4) factorial .
   end)
t

(~ t (: ->)
  (string (test1) (test2)) print-string print-string)
t
