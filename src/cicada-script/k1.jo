(+union nat-u
  zero-t
  succ-t)

(+data zero-t)

(+data succ-t
  prev)

(+jojo add
  (let m n)
  (case n
    (zero-t m)
    (succ-t m n.prev recur succ-c)))

(+jojo mul
  (let m n)
  (case n
    (zero-t n)
    (succ-t m n.prev recur m add)))

(+jojo factorial
  (let n)
  (case n
    (zero-t n succ-c)
    (succ-t n.prev recur n mul)))

(main
  ;; zero-c succ-c succ-c succ-c
  ;; zero-c succ-c succ-c succ-c add factorial
  ;; "zero-c " "string-p" string-append 3 5 string-slice
  2 2  number-neg number-add)
