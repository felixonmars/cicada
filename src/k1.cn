(+union nat-u : (-> -- type-tt)
  zero-t
  succ-t)

(+type zero-t : (-> -- type-tt)
  (-> -- zero-t))

(+type succ-t : (-> -- type-tt)
  (-> prev : nat-u -- succ-t))

(+fun add : (-> m : nat-u, n : nat-u -- nat-u)
  (case n
    (zero-t m)
    (succ-t m n.prev recur succ-c)))

(+fun mul : (-> m : nat-u, n : nat-u -- nat-u)
  (case n
    (zero-t n)
    (succ-t m n.prev recur m add)))

(+fun factorial : (-> n : nat-u -- nat-u)
  (case n
    (zero-t n succ-c)
    (succ-t n.prev recur n mul)))

(main
  zero-c succ-c succ-c succ-c
  zero-c succ-c succ-c succ-c add factorial)
