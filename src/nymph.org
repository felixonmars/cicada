#+property: tangle nymph.cn
#+title: nymph

* [todo-stack]

*** type constructor can occur in function body

    - type constructor need field_name too

*** eq-p in unification

*** about return value of unification and error report

*** unification digraph

    - what is its property ?
      [note that only var can be bound to]

    - what is its interface ?

*** need gc on proxies

* [note]

*** mutual recursive

    - exe call infer through ante-prepare
    - infer call cut on closure-obj-t
    - cut call infer on non den-u

    ------

    - thus it is hard to incrementally test this implementation

*** hypothetically constructed object

    - in oop,
      when you ask for a new object of a class,
      the init function of the class is used
      to form an object of that class.
      [the init function might takes arguments]

    - in cicada,
      when you ask for a new object of a type,

      1. the type might has many data-constructors,
         we do not know
         which data-constructors should be used,
         thus a var-trunk will be created.

      2. the type might has only one data-constructor.
         but it takes arguments,
         we do not have the arguments yet,
         thus a var-trunk will be created.

*** todo to done

    - every time we change a var-trunk-t to done-t

    - then, every time we see a todo-case-t
      we know we can not change it to a done-case-t yet
      because we already tried

*** ffi

    - to handle ffi,
      primitive function must can be applied to trunks,
      and return new todo obj.

      thus I do not implement this feature for now.

* prolog

*** bool

***** bool-u

      #+begin_src cicada
      (+union bool-u
        true-t
        false-t)
      #+end_src

***** true-t

      #+begin_src cicada
      (+data true-t)
      #+end_src

***** false-t

      #+begin_src cicada
      (+data false-t)
      #+end_src

*** nat

***** nat-u

      #+begin_src cicada
      (+union nat-u
        zero-t
        succ-t)
      #+end_src

***** zero-t

      #+begin_src cicada
      (+data zero-t)
      #+end_src

***** succ-t

      #+begin_src cicada
      (+data succ-t
        prev : nat-u)
      #+end_src

*** >< list

***** list-u

      #+begin_src cicada

      #+end_src

***** null-u

      #+begin_src cicada

      #+end_src

***** cons-u

      #+begin_src cicada

      #+end_src

*** >< dict

***** dict-t

      #+begin_src cicada

      #+end_src

* env

*** env-t

    #+begin_src cicada
    (+data env-t
      name-dict : [string-t den-u dict-t]
      data-stack : [obj-u list-u]
      frame-stack : [frame-u list-u]
      scope-stack : [string-t obj-u dict-t list-u]
      goal-stack : [goal-t list-u]
      todo-dict : [string-t todo-u dict-t])
    #+end_src

*** name-dict

***** name-dict/get

      #+begin_src cicada
      (+fun name-dict/get
        : (-> env-t, name : string-t -- env-t den-u)
        dup .name-dict name dict/get)
      #+end_src

*** data-stack

***** data-stack/push

      #+begin_src cicada
      (+fun data-stack/push
        : (-> env : env-t, obj : obj-u -- env-t)
        (. data-stack = [obj env.data-stack cons])
        env clone)
      #+end_src

***** data-stack/pop

      #+begin_src cicada
      (+fun data-stack/pop
        : (-> env : env-t -- env-t obj-u)
        (. data-stack = [env.data-stack.cdr])
        env clone
        env.data-stack.car)
      #+end_src

***** data-stack/drop

      #+begin_src cicada
      (+fun data-stack/drop
        : (-> env-t -- env-t)
        data-stack/pop drop)
      #+end_src

***** data-stack/tos

      #+begin_src cicada
      (+fun data-stack/tos
        : (-> env-t -- env-t obj-u)
        dup .data-stack.car)
      #+end_src

***** >< data-stack/n-pop

      #+begin_src cicada
      (+fun data-stack/n-pop
        : (-> env-t, number : nat-u
           -- env-t, obj-u list-u)
        )
      #+end_src

***** >< data-stack/list-push

      #+begin_src cicada
      (+fun data-stack/list-push
        : (-> env-t obj-u list-u
           -- env-t)
        )
      #+end_src

*** frame-stack

***** frame-stack/push

      #+begin_src cicada
      (+fun frame-stack/push
        : (-> env : env-t, frame : frame-u -- env-t)
        (. frame-stack = [frame env.frame-stack cons])
        env clone)
      #+end_src

***** frame-stack/pop

      #+begin_src cicada
      (+fun frame-stack/pop
        : (-> env : env-t -- env-t frame-u)
        (. frame-stack = [env.frame-stack.cdr])
        env clone
        env.frame-stack.car)
      #+end_src

***** frame-stack/drop

      #+begin_src cicada
      (+fun frame-stack/drop
        : (-> env-t -- env-t)
        frame-stack/pop drop)
      #+end_src

***** frame-stack/tos

      #+begin_src cicada
      (+fun frame-stack/tos
        : (-> env-t -- env-t frame-u)
        dup .frame-stack.car)
      #+end_src

*** frame

***** frame-u

      #+begin_src cicada
      (+union frame-u
        scoping-frame-t
        simple-frame-t)
      #+end_src

***** scoping-frame-t

      #+begin_src cicada
      (+data scoping-frame-t
        body-exp-list : [exp-u list-u]
        index : nat-u)
      #+end_src

***** new/scoping-frame

      #+begin_src cicada
      (+fun new/scoping-frame
        : (-> body-exp-list : [exp-u list-u] -- scoping-frame-t)
        (. body-exp-list = body-exp-list
           index = 0)
        scoping-frame-cr)
      #+end_src

***** simple-frame-t

      #+begin_src cicada
      (+data simple-frame-t
        body-exp-list : [exp-u list-u]
        index : nat-u)
      #+end_src

***** new/simple-frame

      #+begin_src cicada
      (+fun new/simple-frame
        : (-> body-exp-list : [exp-u list-u] -- simple-frame-t)
        (. body-exp-list = body-exp-list
           index = 0)
        simple-frame-cr)
      #+end_src

*** scope-stack

***** >< scope-stack/push

***** >< scope-stack/pop

***** >< scope-stack/drop

***** >< scope-stack/tos

***** scope/get

      #+begin_src cicada
      (+fun scope/get dict/get)
      #+end_src

***** scope/set

      #+begin_src cicada
      (+fun scope/set
        : (-> string-t obj-u dict-t
              local-name : string-t
              obj : obj-u
           -- string-t obj-u dict-t)
        (dict local-name obj)
        dict-update)
      #+end_src

*** scope

***** new/scope

      #+begin_src cicada
      (+fun new/scope
        : (-> -- string-t obj-u dict-t)
        (dict))
      #+end_src

*** goal-stack

*** todo-dict

***** todo-dict/get

      #+begin_src cicada
      (+fun todo-dict/get
        : (-> env-t, id : string-t -- env-t todo-u)
        dup .todu-dict id dict/get)
      #+end_src

***** >< todo-dict/set

      #+begin_src cicada
      (+fun todo-dict/set
        : (-> env-t, id : string-t, todo : todo-u -- env-t)
        )
      #+end_src

* exp

*** exp-u

    #+begin_src cicada
    (+union exp-u
      call-exp-t
      let-exp-t
      closure-exp-t
      arrow-exp-t
      apply-exp-t
      case-exp-t
      sum-exp-t
      construct-exp-t
      field-exp-t
      colon-exp-t
      double-colon-exp-t)
    #+end_src

*** call-exp-t

    #+begin_src cicada
    (+data call-exp-t
      name : string-t)
    #+end_src

*** let-exp-t

    #+begin_src cicada
    (+data let-exp-t
      local-name-list : [string-t list-u])
    #+end_src

*** closure-exp-t

    #+begin_src cicada
    (+data closure-exp-t
      body-exp-list : [exp-u list-u])
    #+end_src

*** arrow-exp-t

    #+begin_src cicada
    (+data arrow-exp-t
      ante-exp-list : [exp-u list-u]
      succ-exp-list : [exp-u list-u])
    #+end_src

*** apply-exp-t

    #+begin_src cicada
    (+data apply-exp-t)
    #+end_src

*** case-exp-t

    #+begin_src cicada
    (+data case-exp-t
      arg-exp-list : [exp-u list-u]
      closure-exp-dict : [string-t closure-exp-t dict-t])
    #+end_src

*** sum-exp-t

    #+begin_src cicada
    (+data sum-exp-t
      sub-exp-list-list : [exp-u list-u list-u])
    #+end_src

*** construct-exp-t

    #+begin_src cicada
    (+data construct-exp-t
      type-name : string-t)
    #+end_src

*** field-exp-t

    #+begin_src cicada
    (+data field-exp-t
      field-name : string-t)
    #+end_src

*** colon-exp-t

    #+begin_src cicada
    (+data colon-exp-t
      local-name : string-t
      type-exp-list : [exp-u list-u])
    #+end_src

*** double-colon-exp-t

    #+begin_src cicada
    (+data double-colon-exp-t
      local-name : string-t
      type-exp-list : [exp-u list-u])
    #+end_src

* den

*** den-u

    #+begin_src cicada
    (+union den-u
      fun-den-t
      type-den-t
      union-den-t)
    #+end_src

*** fun-den-t

    #+begin_src cicada
    (+data fun-den-t
      fun-name : string-t
      type-arrow-exp : arrow-exp-t
      body-exp-list : [exp-u list-u])
    #+end_src

*** type-den-t

    #+begin_src cicada
    (+data type-den-t
      type-name : string-t
      type-arrow-exp : arrow-exp-t
      cons-arrow-exp : arrow-exp-t)
    #+end_src

*** union-den-t

    #+begin_src cicada
    (+data union-den-t
      union-name : string-t
      type-arrow-exp : arrow-exp-t
      type-name-list : [string-t list-u])
    #+end_src

* obj

*** obj-u

    #+begin_src cicada
    (+union obj-u
      data-obj-t
      closure-obj-t
      #:with trunk-u
      #:with type-u)
    #+end_src

*** data-obj-t

    #+begin_src cicada
    (+data data-obj-t
      data-type : data-type-t
      field-obj-dict : [string-t obj-u dict-t])
    #+end_src

*** closure-obj-t

    #+begin_src cicada
    (+data closure-obj-t
      scope : [string-t obj-u dict-t]
      body-exp-list : [exp-u list-u])
    #+end_src

*** trunk

***** trunk-u

      #+begin_src cicada
      (+union trunk-u
        var-trunk-t)
      #+end_src

***** var-trunk-t

      #+begin_src cicada
      ;; done-t
      ;; hypo-t
      ;; bound-t
      (+data var-trunk-t
        trunk-id : string-t)
      #+end_src

*** todo

***** todo-u

      #+begin_src cicada
      (+union todo-u
        done-t
        hypo-t
        bound-t
        case-todo-t
        apply-todo-t
        field-todo-t)
      #+end_src

***** done-t

      #+begin_src cicada
      (+data done-t
        type : type-u
        obj : obj-u)
      #+end_src

***** hypo-t

      #+begin_src cicada
      (+data hypo-t
        type : type-u)
      #+end_src

***** bound-t

      #+begin_src cicada
      (+data bound-t
        to : var-trunk-t)
      #+end_src

*** type

***** type-u

      #+begin_src cicada
      (+union type-u
        data-type-t
        type-type-t
        arrow-type-t
        sum-type-t)
      #+end_src

***** data-type-t

      #+begin_src cicada
      (+data data-type-t
        type-name : string-t
        field-obj-dict : [string-t obj-u dict-t])
      #+end_src

***** type-type-t

      #+begin_src cicada
      (+data type-type-t
        level : nat-u)
      #+end_src

***** arrow-type-t

      #+begin_src cicada
      (+data arrow-type-t
        ante-type-list : [type-u list-u]
        succ-type-list : [type-u list-u])
      #+end_src

***** sum-type-t

      #+begin_src cicada
      (+data sum-type-t
        sub-type-list : [type-u list-u])
      #+end_src

* exe

*** exe

    #+begin_src cicada
    (+fun exe
      : (-> env-t exp-u -- env-t)
      (case dup
        (call-exp-t call-exp/exe)
        (let-exp-t let-exp/exe)
        (closure-exp-t closure-exp/exe)
        (arrow-exp-t arrow-exp/exe)
        (apply-exp-t apply-exp/exe)
        (case-exp-t case-exp/exe)
        (sum-exp-t sum-exp/exe)
        (construct-exp-t construct-exp/exe)
        (field-exp-t field-exp/exe)
        (colon-exp-t colon-exp/exe)
        (double-colon-exp-t double-colon-exp/exe)))
    #+end_src

*** call-exp/exe

    #+begin_src cicada
    (+fun call-exp/exe
      : (-> env-t, exp : call-exp-t -- env-t)
      exp.name name-dict/get den-exe)
    #+end_src

*** den-exe

***** den-exe

      #+begin_src cicada
      (+fun den-exe
        : (-> env-t den-u -- env-t)
        (case dup
          (fun-den-t fun-den/den-exe)
          (type-den-t type-den/den-exe)
          (union-den-t union-den/den-exe)))
      #+end_src

***** fun-den/den-exe

      #+begin_src cicada
      (+fun fun-den/den-exe
        : (-> env-t, den : fun-den-t -- env-t)
        new/scope scope-stack/push
        den.body-exp-list new/scoping-frame frame-stack/push)
      #+end_src

***** ><><>< type-den/den-exe

      #+begin_src cicada
      (+fun type-den/den-exe
        : (-> env-t, den : type-den-t -- env-t)
        den.type-arrow-exp collect (let arrow-type)
        (. type-name = den.type-name
           field-obj-dict = )
        data-type-cr)

      ;; (+data data-type-t
      ;;   type-name : string-t
      ;;   field-obj-dict : [string-t obj-u dict-t])
      #+end_src

***** ><><>< union-den/den-exe

      #+begin_src cicada
      (+fun union-den/den-exe
        : (-> env-t, den : union-den-t -- env-t)
        )
      #+end_src

*** let-exp/exe

    #+begin_src cicada
    (+fun let-exp/exe
      : (-> env-t, exp : let-exp-t -- env-t)
      exp.local-name-list list-reverse
      let-exp/exe/loop)
    #+end_src

*** let-exp/exe/loop

    #+begin_src cicada
    (+fun let-exp/exe/loop
      : (-> env-t, local-name-list : [string-t list-u] -- env-t)
      (case local-name-list
        (null-t)
        (cons-t
          data-stack/pop (let obj)
          scope-stack/pop
          local-name-list.car obj scope/set
          scope-stack/push
          local-name-list.cdr recur)))
    #+end_src

*** closure-exp/exe

    #+begin_src cicada
    (+fun closure-exp/exe
      : (-> env-t, exp : closure-exp-t -- env-t)
      (. scope = scope-stack/tos
         body-exp-list = [exp.body-exp-list])
      closure-obj-cr
      data-stack/push)
    #+end_src

*** arrow-exp/exe

    #+begin_src cicada
    (+fun arrow-exp/exe
      : (-> env-t, exp : arrow-exp-t -- env-t)
      ;; calling collect-list
      ;;   might effect current scope
      (. ante-type-list = [exp.ante-exp-list collect-list]
         succ-type-list = [exp.succ-exp-list collect-list])
      arrow-type-cr
      data-stack/push)
    #+end_src

*** apply-exp/exe

    #+begin_src cicada
    (+fun apply-exp/exe
      : (-> env-t, exp : apply-exp-t -- env-t)
      data-stack/pop obj/try (let obj)
      (case obj
        (closure-obj-t
          obj.scope scope-stack/push
          obj.body-exp-list new/scoping-frame frame-stack/push)
        (trunk-u
          (. type = [obj infer .succ-type-list .car]
             fun-trunk = obj
             arg-obj-list =
             [obj infer .ante-type-list list-length
              data-stack/n-pop])
          apply-todo-cr
          new/apply-trunk
          data-stack/push)))
    #+end_src

*** new/apply-trunk

    #+begin_src cicada
    (+fun new/apply-trunk
      : (-> env-t, apply-todo : apply-todo-t
         -- env-t, apply-trunk-t)
      "apply" generate/trunk-id (let id)
      id apply-todo todo-dict/set
      id apply-trunk-c)
    #+end_src

*** >< obj/try

    #+begin_src cicada
    (+fun obj/try
      : (-> env-t obj-u -- env-t obj-u)
      ;; after obj/try
      ;; if the obj is still a trunk
      ;;   we know it is not done
      ;; if the obj is var-trunk
      ;;   we also know it is not bound to a done var-trunk
      )
    #+end_src

*** case-exp/exe

    #+begin_src cicada
    (+fun case-exp/exe
      : (-> env-t, exp : case-exp-t -- env-t)
      ;; calling collect
      ;;   might effect current scope
      exp.arg-exp-list collect (let obj)
      ;; no need to use obj/try on newly collected obj
      (case obj
        (data-obj-t
          exp.closure-exp-dict
          obj.data-type.type-name dict/get
          closure-exp/exe
          apply-exp/exe)
        (trunk-u
          exp.closure-exp-dict
          closure-exp-dict->closure-obj-dict
          (let closure-obj-dict)
          obj closure-obj-dict closure-obj-dict->sum-type
          (let sum-type)
          (. sum-type = sum-type
             arg-trunk = obj
             closure-obj-dict = closure-obj-dict)
          case-todo-cr
          new/case-trunk
          data-stack/push)))
    #+end_src

*** >< new/case-trunk

*** >< closure-exp-dict->closure-obj-dict

    #+begin_src cicada
    (+fun closure-exp-dict->closure-obj-dict
      : (-> env-t
            closure-exp-dict : [string-t closure-exp-t dict-t]
         -- env-t, string-t closure-obj-t dict-t)
      )
    #+end_src

*** >< closure-obj-dict->sum-type

    #+begin_src cicada
    (+fun closure-obj-dict->sum-type
      : (-> env-t
            obj : obj-u
            closure-obj-dict : [string-t closure-obj-t dict-t]
         -- env-t, sum-type-t)
      )
    #+end_src

*** ><><>< sum-exp/exe

    #+begin_src cicada
    (+fun sum-exp/exe
      : (-> env-t, exp : sum-exp-t -- env-t)
      )
    #+end_src

*** ><><>< construct-exp/exe

    #+begin_src cicada
    (+fun construct-exp/exe
      : (-> env-t, exp : construct-exp-t -- env-t)
      exp.type-name name-dict/get (let type-den)
      type-den.cons-arrow-exp )
    #+end_src

*** ><><>< field-exp/exe

    #+begin_src cicada
    (+fun field-exp/exe
      : (-> env-t, exp : field-exp-t -- env-t)
      )
    #+end_src

*** >< generate/trunk-id

    #+begin_src cicada
    (+fun generate/trunk-id
      : (-> env-t, seed : string-t
         -- env-t, string-t)
      )
    #+end_src

*** ><><>< colon-exp/exe

    #+begin_src cicada
    (+fun colon-exp/exe
      : (-> env-t, exp : colon-exp-t -- env-t)
      exp.type-exp-list collect (let type)
      (. trunk-id = [exp.local-name generate/trunk-id]
         type = type)
      var-trunk-cr (let var-trunk)
      scope-stack/pop
      exp.local-name var-trunk scope/set
      scope-stack/push
      type data-stack/push)
    #+end_src

*** double-colon-exp/exe

    #+begin_src cicada
    (+fun double-colon-exp/exe
      : (-> env-t double-colon-exp-t -- env-t)
      colon-exp/exe
      data-stack/drop)
    #+end_src

* run

* collect

*** collect-list

    #+begin_src cicada
    (+fun collect-list
      : (-> env-t, exp-list : [exp-u list-u]
         -- env-t, obj-u list-u)
      )
    #+end_src

*** collect

    #+begin_src cicada
    (+fun collect
      : (-> env-t, exp-list : [exp-u list-u]
         -- env-t, obj-u)
      )
    #+end_src

* cut

*** cut

    #+begin_src cicada
    (+fun cut
      : (-> env-t exp-u -- env-t)
      (case dup
        (call-exp-t call-exp/cut)
        (let-exp-t let-exp/cut)
        (closure-exp-t closure-exp/cut)
        (arrow-exp-t arrow-exp/cut)
        (apply-exp-t apply-exp/cut)
        (case-exp-t case-exp/cut)
        (sum-exp-t sum-exp/cut)
        (construct-exp-t construct-exp/cut)
        (field-exp-t field-exp/cut)
        (colon-exp-t colon-exp/cut)
        (double-colon-exp-t double-colon-exp/cut)))
    #+end_src

*** call-exp/cut

    #+begin_src cicada
    (+fun call-exp/cut
      : (-> env-t, exp : call-exp-t -- env-t)
      exp.name name-dict/get den-cut)
    #+end_src

*** den-cut

***** den-cut

      #+begin_src cicada
      (+fun den-cut
        : (-> env-t den-u -- env-t)
        (case dup
          (fun-den-t fun-den/den-cut)
          (type-den-t type-den/den-cut)
          (union-den-t union-den/den-cut)))
      #+end_src

***** fun-den/den-cut

      #+begin_src cicada
      (+fun fun-den/den-cut
        : (-> env-t, den : fun-den-t -- env-t)
        ;; must create a new scope
        ;;   before creating an arrow-type
        ;; because creating an arrow-type
        ;;   might effect current scope
        new/scope scope-stack/push
        den.type-arrow-exp collect (let arrow-type)
        arrow-type.ante-type-list ante-type-list/unify
        arrow-type.succ-type-list data-stack/list-push
        scope-stack/drop)
      #+end_src

***** >< ante-type-list/unify

      #+begin_src cicada
      (+fun ante-type-list/unify
        : (-> env-t, ante-type-list : [type-u list-u] -- env-t)
        )
      #+end_src

***** ><><>< type-den/den-cut

      #+begin_src cicada
      (+fun type-den/den-cut
        : (-> env-t, den : type-den-t -- env-t)
        )
      #+end_src

***** ><><>< union-den/den-cut

      #+begin_src cicada
      (+fun union-den/den-cut
        : (-> env-t, den : union-den-t -- env-t)
        )
      #+end_src

*** let-exp/cut

*** closure-exp/cut

*** arrow-exp/cut

*** apply-exp/cut

*** case-exp/cut

*** sum-exp/cut

*** construct-exp/cut

*** field-exp/cut

*** colon-exp/cut

*** double-colon-exp/cut

* infer

*** infer

    #+begin_src cicada
    (+fun infer
      : (-> env-t obj-u -- type-u env-t)
      (case dup
        (data-obj-t data-obj/infer)
        (closure-obj-t closure-obj/infer)
        (trunk-u trunk/infer)
        (type-u type/infer)))
    #+end_src

*** data-obj/infer

*** closure-obj/infer

*** trunk/infer

    #+begin_src cicada
    (+fun trunk/infer
      : (-> env-t trunk-u -- type-u env-t)
      (case ))
    #+end_src

*** type/infer

* unfiy

* cover

* check

* epilog
