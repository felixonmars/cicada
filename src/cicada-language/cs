#!/usr/bin/env node

const fs = require("fs");
// const path = require("path");

const cicada = require("../cicada-script/cicada-script.js");

function repl ()
{
    eval_file_vect ([]);
    return;

//     let script =
//         fs.readFileSync ("./core-script.cs")
//         .toString ();
//     let env = cicada.eval_script (script);

//     process.stdin.setEncoding('utf8');
//     process.stdin.on('readable', () => {
//         const chunk = process.stdin.read();
//         if (chunk !== null) {
//             process.stdout.write(`data: ${chunk}`);
//         }
//     });
//     process.stdin.on('end', () => {
//         process.stdout.write('end');
//     });
}

function eval_file_vect (file_vect)
{
    let script =
        fs.readFileSync ("../cicada-script/core-script.cs")
        .toString ();
    for (let file of file_vect) {
        let file_script =
            fs.readFileSync (file)
            .toString ();
        script = script.concat (file_script);
    }
    let env = cicada.eval_script (script);
    console.log (env.data_stack);
}

function main ()
{
    let arg_vect = process.argv.slice(2);
    if (arg_vect.length === 0)
        repl ();
    else
        eval_file_vect (arg_vect);
}

main ();
