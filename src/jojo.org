#+property: tangle jojo.js
#+title: jojo

* [todo-stack]

* [note]

*** to be useful

    - write data out in a standard way

    - ffi to js

    - macro system

    - module system
      must use js ecosystem ?

    - type class

* prolog

* env -- environment

*** env_t

    #+begin_src js
    class env_t
    {
        constructor ()
        {
            this.name_dict = new name_dict_t ();
            this.data_stack = [];
            this.frame_stack = [];
            this.scope_stack = [];
        }
    }
    #+end_src

*** name_dict

***** name_dict_t

      #+begin_src js
      class name_dict_t
      {
          constructor ()
          {
              this.dict = new Map ();
          }

          get (name)
          {
              return this.dict.get(name);
          }

          set (name, den)
          {
              this.dict.set(name, den);
          }
      }
      #+end_src

***** name_dict_get

      #+begin_src js
      function name_dict_get (env, name)
      {
          return env.name_dict.get (name);
      }
      #+end_src

***** name_dict_set

      #+begin_src js
      function name_dict_set (env, name, den)
      {
          env.name_dict.set (name, den);
      }
      #+end_src

*** data_stack

***** data_stack_push

      #+begin_src js
      function data_stack_push (env, obj)
      {
          env.data_stack.push (obj);
      }
      #+end_src

***** data_stack_pop

      #+begin_src js
      function data_stack_pop (env)
      {
          return env.data_stack.pop ();
      }
      #+end_src

***** data_stack_tos

      #+begin_src js
      function data_stack_tos (env)
      {
           let length = data_stack_length (env);
           return env.data_stack[length - 1];
      }
      #+end_src

***** data_stack_drop

      #+begin_src js
      function data_stack_drop (env)
      {
          data_stack_pop (env);
      }
      #+end_src

***** data_stack_length

      #+begin_src js
      function data_stack_length (env)
      {
          return env.data_stack.length;
      }
      #+end_src

*** frame_stack

***** frame_stack_push

      #+begin_src js
      function frame_stack_push (env, frame)
      {
          env.frame_stack.push (frame);
      }
      #+end_src

***** frame_stack_pop

      #+begin_src js
      function frame_stack_pop (env)
      {
          return env.frame_stack.pop ();
      }
      #+end_src

***** frame_stack_tos

      #+begin_src js
      function frame_stack_tos (env)
      {
           let length = frame_stack_length (env);
           return env.frame_stack[length - 1];
      }
      #+end_src

***** frame_stack_drop

      #+begin_src js
      function frame_stack_drop (env)
      {
          frame_stack_pop (env);
      }
      #+end_src

***** frame_stack_length

      #+begin_src js
      function frame_stack_length (env)
      {
          return env.frame_stack.length;
      }
      #+end_src

*** frame

***** scoping_frame_t

      #+begin_src js
      class scoping_frame_t
      {
          constructor (exp_list)
          {
              this.exp_list = exp_list;
              this.length = exp_list.length;
              this.index = 0;
          }
      }
      #+end_src

***** simple_frame_t

      #+begin_src js
      class simple_frame_t
      {
          constructor (exp_list)
          {
              this.exp_list = exp_list;
              this.length = exp_list.length;
              this.index = 0;
          }
      }
      #+end_src

***** frame_end_p

      #+begin_src js
      function frame_end_p (frame)
      {
          return frame.index == frame.length;
      }
      #+end_src

***** frame_next_exp

      #+begin_src js
      function frame_next_exp (frame)
      {
          let exp = frame.exp_list[frame.index];
          frame.index = frame.index + 1;
          return exp;
      }
      #+end_src

*** scope_stack

***** scope_stack_push

      #+begin_src js
      function scope_stack_push (env, scope)
      {
          env.scope_stack.push (scope);
      }
      #+end_src

***** scope_stack_pop

      #+begin_src js
      function scope_stack_pop (env)
      {
          return env.scope_stack.pop ();
      }
      #+end_src

***** scope_stack_tos

      #+begin_src js
      function scope_stack_tos (env)
      {
           let length = scope_stack_length (env);
           return env.scope_stack[length - 1];
      }
      #+end_src

***** scope_stack_drop

      #+begin_src js
      function scope_stack_drop (env)
      {
          scope_stack_pop (env);
      }
      #+end_src

***** scope_stack_length

      #+begin_src js
      function scope_stack_length (env)
      {
          return env.scope_stack.length;
      }
      #+end_src

*** scope

***** scope_t

      #+begin_src js
      class scope_t
      {
          constructor ()
          {
              this.dict = new Map ();
          }

          get (name)
          {
              return this.dict.get(name);
          }

          set (name, obj)
          {
              this.dict.set(name, obj);
          }
      }
      #+end_src

***** scope_get

      #+begin_src js
      function scope_get (scope, name)
      {
          return scope.get(name);
      }
      #+end_src

***** scope_set

      #+begin_src js
      function scope_set (scope, name, obj)
      {
          scope.set(name, obj);
      }
      #+end_src

* eval

*** list_eval

    #+begin_src js
    function list_eval (env, exp_list)
    {
        let base = frame_stack_length (env);
        let frame = new simple_frame_t (exp_list);
        frame_stack_push (env, frame);
        eval_with_base (env, base);
    }
    #+end_src

*** eval_with_base

    #+begin_src js
    function eval_with_base (env, base)
    {
        while (frame_stack_length (env) > base)
            eval_one_step (env);
    }
    #+end_src

*** eval_one_step

    #+begin_src js
    function eval_one_step (env)
    {
        let frame = frame_stack_tos (env);
        let scope = scope_stack_tos (env);
        let exp = frame_next_exp (frame);
        if (frame_end_p (frame)) {
            // proper tail call
            frame_stack_drop (env);
            if (frame instanceof scoping_frame_t)
                scope_stack_drop (env);
        }
        exp.exe (env, scope);
    }
    #+end_src

* exp -- expression

*** call_exp_t

    #+begin_src js
    class call_exp_t
    {
        constructor (name)
        {
            this.name = name;
        }

        exe (env, scope)
        {
            let den = name_dict_get (env, this.name);
            den.den_exe (env);
        }
    }
    #+end_src

*** get_local_exp_t

    #+begin_src js
    class get_local_exp_t
    {
        constructor (local_name)
        {
            this.local_name = local_name;
        }

        exe (env, scope)
        {
             let obj = scope_get (scope, this.local_name);
             data_stack_push (env, obj);
        }
    }
    #+end_src

*** set_local_exp_t

    #+begin_src js
    class set_local_exp_t
    {
        constructor (local_name)
        {
            this.local_name = local_name;
        }

        exe (env, scope)
        {
            let obj = data_stack_pop (env);
            scope_set (scope, this.local_name, obj);
        }
    }
    #+end_src

*** clo_exp_t

    #+begin_src js
    class clo_exp_t
    {
        constructor (exp_list)
        {
            this.exp_list = exp_list;
        }

        exe (env, scope)
        {
            let clo_obj = new clo_obj_t (this.exp_list, scope);
            data_stack_push (env, clo_obj);
        }
    }
    #+end_src

*** apply_exp_t

    #+begin_src js
    class apply_exp_t
    {
       constructor () { }

       exe (env, scope)
       {
            let clo_obj = data_stack_pop (env);
            let frame = new scoping_frame_t (clo_obj.exp_list);
            frame_stack_push (env, frame);
            scope_stack_push (env, clo_obj.scope);
       }
    }
    #+end_src

*** >< case_exp_t

    #+begin_src js
    class case_exp_t
    {
        constructor (arg, clause_dict)
        {
            this.arg = arg;
            this.clause_dict = clause_dict;
        }
    }
    #+end_src

*** ><>< create_exp_t

    #+begin_src js
    class create_exp_t
    {
        constructor ()
        {

        }
    }
    #+end_src

*** ><>< clone_exp_t

    #+begin_src js
    class clone_exp_t
    {
        constructor ()
        {

        }
    }
    #+end_src

* >< collect

*** collect_obj_list

    #+begin_src js
    // obj list
    function collect_obj_list (env, exp_list)
    {
    }
    #+end_src

*** collect_obj

    #+begin_src js
    // obj list
    function collect_obj (env, exp)
    {
    }
    #+end_src

* den -- denotation

*** >< union_den_t

    #+begin_src js
    class union_den_t
    {
        constructor (name, type_arrow, union_list)
        {
            this.name = name;
            this.type_arrow = type_arrow;
            this.union_list = union_list;
        }
    }
    #+end_src

*** >< type_den_t

    #+begin_src js
    class type_den_t
    {
        constructor (name, type_arrow, cons_arrow)
        {
            this.name = name;
            this.type_arrow = type_arrow;
            this.cons_arrow = cons_arrow;
        }
    }
    #+end_src

*** fun_den_t

    #+begin_src js
    class fun_den_t
    {
        constructor (name, type_arrow, exp_list)
        {
            this.name = name;
            this.type_arrow = type_arrow;
            this.exp_list = exp_list;
        }

        den_exe (env)
        {
            // ><><><
            // handle type_arrow
            let frame = new scoping_frame_t (this.exp_list);
            let scope = new scope_t ();
            frame_stack_push (env, frame);
            scope_stack_push (env, scope);
        }
    }
    #+end_src

*** >< gene_den_t

    #+begin_src js
    class gene_den_t
    {
        constructor (name, type_arrow, exp_list)
        {
            this.name = name;
            this.type_arrow = type_arrow;
            this.exp_list = exp_list;
        }
    }
    #+end_src

*** >< disp_den_t

    #+begin_src js
    class disp_den_t
    {
        constructor (name, type_arrow, exp_list)
        {
            this.name = name;
            this.type_arrow = type_arrow;
            this.exp_list = exp_list;
        }
    }
    #+end_src

* obj -- object

*** data_obj_t

    #+begin_src js
    class data_obj_t
    {
        constructor ()
        {
            this.type_name = type_name;
            this.fields = fields;
        }
    }
    #+end_src

*** clo_obj_t

    #+begin_src js
    class clo_obj_t
    {
        constructor (exp_list, scope)
        {
            this.exp_list = exp_list;
            this.scope = scope;
        }
    }
    #+end_src

* >< sexp -- string expression

*** ><

* >< prim -- primitive

*** string_t

* run --

*** run

    #+begin_src js
    function run (code)
    {
        let env = new env_t ();
        compile_code (env, code);

    }
    #+end_src

* epilog

*** main

*** test

    #+begin_src js
    function test ()
    {
        let env = new env_t ();

        let fun_den = new fun_den_t (
            "dup",
            undefined,
            [
                new set_local_exp_t (":x"),
                new get_local_exp_t (":x"),
                new get_local_exp_t (":x"),
            ]
        );

        let main_exp_list = [
            new call_exp_t ("dup"),
        ];

        data_stack_push (env, 4);

        name_dict_set (env, "dup", fun_den);

        list_eval (env, main_exp_list);
    }

    function test_many ()
    {
        let counter = 0;
        while (counter < 1000000) {
            test ();
            counter = counter + 1;
        }
    }

    test_many ();

    // console.log (env);
    #+end_src
