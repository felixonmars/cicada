#+property: tangle jojo.rs
#+title: jojo

* [todo-stack]

* prolog

*** use

    #+begin_src rust
    use std::collections::hash_map::HashMap;
    use std::collections::hash_map::Entry;
    #+end_src

* Env

*** Env

    #+begin_src rust
    struct Env<'a> {
        nd: HashMap<String, Obj<'a>>,
        ds: Vec<Obj<'a>>,
        rs: Frame<'a>,
    }
    #+end_src

*** Frame

    #+begin_src rust
    struct Frame<'a> {
        index: usize,
        jojo: Vec<Exp<'a>>,
        locals: HashMap<String, Obj<'a>>,
    }
    #+end_src

*** Name

    #+begin_src rust
    type Name<'a> = Entry<'a, String, Obj<'a>>;
    #+end_src

* Obj

*** Tag

    #+begin_src rust
    enum Tag {
        Prim,
        Clo,
        Bool,
        Int,
        Str,
        Dict,
        Vect,
        Data,
    }
    #+end_src

*** Obj

    #+begin_src rust
    enum Obj<'a> {
        Prim(ObjPrim),
        Clo(ObjClo<'a>),
        Bool(ObjBool),
        Int(ObjInt),
        Str(ObjStr),
        Dict(ObjDict),
        Vect(ObjVect),
        Data(ObjData),
    }
    #+end_src

*** ObjPrim

    #+begin_src rust
    struct ObjPrim {
        tag: Tag,
        value: fn(&mut Env),
    }
    #+end_src

*** ObjClo

    #+begin_src rust
    struct ObjClo<'a> {
        tag: Tag,
        value: Vec<Exp<'a>>,
    }
    #+end_src

*** ObjBool

    #+begin_src rust
    struct ObjBool {
        tag: Tag,
        value: bool,
    }
    #+end_src

*** ObjInt

    #+begin_src rust
    struct ObjInt {
        tag: Tag,
        value: isize,
    }
    #+end_src

*** ObjStr

    #+begin_src rust
    struct ObjStr {
        tag: Tag,
        value: String,
    }
    #+end_src

*** ObjDict

    #+begin_src rust
    struct ObjDict {
        tag: Tag,
        value: String,
    }
    #+end_src

*** ObjVect

    #+begin_src rust
    struct ObjVect {
        tag: Tag,
        value: String,
    }
    #+end_src

*** ObjData

    #+begin_src rust
    struct ObjData {
        tag: Tag,
        value: String,
    }
    #+end_src

* Exp

*** Exp

    #+begin_src rust
    enum Exp<'a> {
       Call(ExpCall<'a>),
       Get(ExpGet<'a>),
       Set(ExpSet<'a>),
       Clo(ExpClo<'a>),
       Begin(ExpBegin<'a>),
    }
    #+end_src

*** ExpCall

    #+begin_src rust
    struct ExpCall<'a> {
        name: Name<'a>
    }
    #+end_src

*** ExpGet

    #+begin_src rust
    struct ExpGet<'a> {
        local_name: Name<'a>
    }
    #+end_src

*** ExpSet

    #+begin_src rust
    struct ExpSet<'a> {
        local_name: Name<'a>
    }
    #+end_src

*** ExpClo

    #+begin_src rust
    struct ExpClo<'a> {
        exp: &'a Exp<'a>
    }
    #+end_src

*** ExpBegin

    #+begin_src rust
    struct ExpBegin<'a> {
        body: Vec<Exp<'a>>
    }
    #+end_src

* epilog

*** main

    #+begin_src rust
    fn main() {

    }
    #+end_src
