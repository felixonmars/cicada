#+property: tangle jojo.js
#+title: jojo

* [todo-stack]

*** den_u

*** name_dict

*** data_stack

*** return_stack

*** gc before 'read'

*** 'read'

* [note]

*** naming convention

    | _t  | class     |
    | _u  | union     |
    | _fn | function  |
    | _p  | predicate |

* prolog

* env -- environment

*** env_t

    #+begin_src js
    class env_t {
        constructor (name_dict,
                     data_stack,
                     return_stack)
        {
            this.name_dict = name_dict;
            this.data_stack = data_stack;
            this.return_stack = return_stack;
        }
    }
    #+end_src

*** new_env

    #+begin_src js
    // env_t
    function new_env ()
    {
        let env = new env_t (new Map (),
                             [],
                             []);
        return env;
    }
    #+end_src

*** name_dict

*** return_stack

*** data_stack

* exp -- expression

*** call_exp_t

*** get_local_exp_t

*** set_local_exp_t

*** clo_exp_t

*** arrow_exp_t

*** match_exp_t

*** apply_exp_t

* >< eval

*** list_eval

    #+begin_src js
    // env_t
    function list_eval (env, exp_list)
    {

    }
    #+end_src

*** eval_with_base

    #+begin_src js
    // env_t
    function eval_with_base (env, base)
    {
    }
    #+end_src

*** eval_one_step

    #+begin_src js
    // env_t
    function eval_one_step (env)
    {
        frame_t *frame = return_stack_tos (env->return_stack);
        ins_u ins = frame->body[frame->index];
        frame->index = frame->index + 1;
        ins_exe (ins, env);
    }
    #+end_src

* den -- denotation

*** fun_den_t

*** union_den_t

*** type_den_t

*** gene_den_t

*** disp_den_t

* obj -- object

*** data_obj_t

*** clo_obj_t

* prim -- primitive

*** string_t

*** sexp_t

* epilog

*** main
