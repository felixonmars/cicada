#+property: tangle jojo.rs
#+title: jojo

* [todo-stack]

* prolog

*** use

    #+begin_src rust
    use std::collections::hash_map::HashMap;
    use std::collections::hash_map::Entry;
    use std::collections::vec_deque::VecDeque;
    #+end_src

* Env

*** Env

    #+begin_src rust
    struct Env<'a> {
        nd: HashMap<String, Den<'a>>,
        ds: Vec<Obj<'a>>,
        rs: VecDeque<Frame<'a>>,
    }
    #+end_src

*** Frame

    #+begin_src rust
    struct Frame<'a> {
        index: usize,
        jojo: Vec<Ins<'a>>,
        locals: HashMap<String, Obj<'a>>,
    }
    #+end_src

*** Name

    #+begin_src rust
    type Name<'a> = Entry<'a, String, Obj<'a>>;
    #+end_src

*** eval_one_step

    #+begin_src rust
    fn eval_one_step(mut env: &mut Env) {
        match env.rs.back_mut() {
            Some(frame) => {
                let ins = &frame.jojo[frame.index];
                frame.index = frame.index + 1;
                exe(ins, &mut env);
            }
            None => {
                panic!("- eval_one_step: meet empty rs");
            }
        }
    }
    #+end_src

*** eval

    #+begin_src rust
    fn eval(env: &mut Env) {

    }
    #+end_src

* Den

*** Den

    #+begin_src rust
    enum Den<'a> {
       Fun(FunDen<'a>),
    }
    #+end_src

*** FunDen

    #+begin_src rust
    struct FunDen<'a> {
       name: String,
       jojo: Vec<Ins<'a>>,
    }
    #+end_src

* Obj

*** Tag

    #+begin_src rust
    enum Tag {
        Prim,
        Clo,
        Int,
        Str,
    }
    #+end_src

*** Obj

    #+begin_src rust
    enum Obj<'a> {
        Prim(PrimObj),
        Clo(CloObj<'a>),
        Int(IntObj),
        Str(StrObj),
    }
    #+end_src

*** PrimObj

    #+begin_src rust
    struct PrimObj {
        tag: Tag,
        value: fn(&mut Env),
        // ><><><
    }
    #+end_src

*** CloObj

    #+begin_src rust
    struct CloObj<'a> {
        tag: Tag,
        value: Vec<Ins<'a>>,
        // ><><><
    }
    #+end_src

*** IntObj

    #+begin_src rust
    struct IntObj {
        tag: Tag,
        value: isize,
    }
    #+end_src

*** StrObj

    #+begin_src rust
    struct StrObj {
        tag: Tag,
        value: String,
    }
    #+end_src

* Ins

*** Ins

    #+begin_src rust
    enum Ins<'a> {
        Call(CallIns<'a>),
        TailCall(TailCallIns<'a>),
        End(EndIns),
        Get(GetIns<'a>),
        Set(SetIns<'a>),
        Clo(CloIns<'a>),
    }
    #+end_src

*** CallIns

    #+begin_src rust
    struct CallIns<'a> {
        name: Name<'a>
    }
    #+end_src

*** TailCallIns

    #+begin_src rust
    struct TailCallIns<'a> {
        name: Name<'a>
    }
    #+end_src

*** EndIns

    #+begin_src rust
    struct EndIns {
    }
    #+end_src

*** GetIns

    #+begin_src rust
    struct GetIns<'a> {
        local_name: Name<'a>
    }
    #+end_src

*** SetIns

    #+begin_src rust
    struct SetIns<'a> {
        local_name: Name<'a>
    }
    #+end_src

*** CloIns

    #+begin_src rust
    struct CloIns<'a> {
        exp: Vec<Ins<'a>>
    }
    #+end_src

*** exe

    #+begin_src rust
    fn exe(ins: &Ins, env: &mut Env) {

    }
    #+end_src

* epilog

*** main

    #+begin_src rust
    fn main() {

    }
    #+end_src
