#+HTML_HEAD: <link rel="stylesheet" href="http://xieyuheng.github.io/asset/css/page.css" type="text/css" media="screen" />
#+PROPERTY: tangle jojo.c
#+TITLE:  jojo

---------

- the implementation of the interpreter ([[https://github.com/xieyuheng/jojo][source]])

---------

* todo

  - maintain a record for
    - defprim
    - defun
    - defvar
  - better structure of code
  - export the syntax extension mechanism to jojo
    syntax for list
  - print-stack for run
  - no re-define
    no use before define
  - better jotable for being compiler target
  - debug
  - fix jump
  - error report for every limited number

* helper

*** header

    #+begin_src c
    #include <stdio.h>
    #include <ctype.h>
    #include <stdlib.h>
    #include <stdint.h>
    #include <setjmp.h>
    #include <string.h>
    #include <dlfcn.h>
    #include <unistd.h>
    #+end_src

*** bool

    #+begin_src c
    typedef enum { false, true } bool;
    #+end_src

*** cell

    #+begin_src c
    typedef intptr_t cell;
    #+end_src

*** number

    #+begin_src c
    cell max(cell a, cell b) {
      if (a < b) {
        return b;
      }
      else {
        return a;
      }
    }

    cell min(cell a, cell b) {
      if (a > b) {
        return b;
      }
      else {
        return a;
      }
    }
    #+end_src

*** char

    #+begin_src c
    bool isbarcket(char c) {
      return (c == '(' ||
              c == ')' ||
              c == '[' ||
              c == ']' ||
              c == '{' ||
              c == '}');
    }
    #+end_src

*** string

***** string

      #+begin_src c
      typedef char* string;
      #+end_src

***** string_equal

      #+begin_src c
      bool string_equal(string s1, string s2) {
        if (strcmp(s1, s2) == 0) {
          return true;
        }
        else {
          return false;
        }
      }
      #+end_src

***** nat_string_p

      #+begin_src c
      bool nat_string_p(string str) {
        cell i = 0;
        while (str[i] != 0) {
          if (!isdigit(str[i])) {
            return false;
            }
          i++;
        }
        return true;
      }
      #+end_src

***** int_string_p

      #+begin_src c
      bool int_string_p(string str) {
        if (str[0] == '-' ||
            str[0] == '+') {
          return nat_string_p(str + 1);
        }
        else {
          return nat_string_p(str);
        }
      }
      #+end_src

* jotable

*** primitive

    #+begin_src c
    typedef void (*primitive)();
    #+end_src

*** jo & jojo

    #+begin_src c
    typedef cell jo;

    typedef struct {
      cell size;
      jo *array;
    } jojo;
    #+end_src

*** bind & jotable_entry

    #+begin_src c
    typedef union {
      cell cell;
      primitive primitive;
      jojo jojo;
    } bind;

    typedef struct {
      cell index;
      string key;
      jo type;
      bind value;
      cell orbit_length;
      cell orbiton;
    } jotable_entry;
    #+end_src

*** proto_jotable_entry

    #+begin_src c
    jo str2jo (string str);

    jotable_entry proto_jotable_entry(cell index) {
      jotable_entry e = {
        .index = index,
        .key = 0,
        .type = str2jo("none"),
        .value.cell = 0,
        .orbit_length = 0,
        .orbiton = 0
      };
      return e;
    }
    #+end_src

*** jotable_entry_[occured|entry_used|no_collision]

    #+begin_src c
    bool jotable_entry_occured(jotable_entry e) {
      return e.key != 0;
    }

    bool jotable_entry_used(jotable_entry e) {
      return e.type != str2jo("none");
    }

    bool jotable_entry_no_collision(jotable_entry e) {
      return e.index == e.orbiton;
    }
    #+end_src

*** jotable

    #+begin_src c
    // prime table size
    //   1000003   about 976 k
    //   1000033
    //   1000333
    //   100003    about 97 k
    //   100333
    //   997
    #define jotable_size 100003
    jotable_entry jotable[jotable_size];
    cell jotable_counter = 0;
    #+end_src

*** string_to_sum

    #+begin_src c
    cell string_to_sum(string str) {
      cell sum = 0;
      cell max_step = 10;
      cell i = 0;
      while (i < strlen(str)) {
        sum = sum + str[i] * (2 << min(i, max_step));
        i++;
      }
      return sum;
    }
    #+end_src

*** jotable_keyeq

    #+begin_src c
    bool jotable_keyeq(string k1, string k2) {
      return string_equal(k1, k2);
    }
    #+end_src

*** jotable_hash

    #+begin_src c
    cell jotable_hash(string key, cell counter) {
      return (counter + string_to_sum(key)) % jotable_size;
    }
    #+end_src

*** string_area

    #+begin_src c
    char string_area[4 * 1024 * 1024];
    cell string_area_counter = 0;
    #+end_src

*** copy_to_string_area

    #+begin_src c
    string copy_to_string_area(string str) {
      char *str1;
      cell i = 0;
      str1 = (string_area + string_area_counter);
      while (true) {
        if (str[i] == 0) {
          str1[i] = str[i];
          i++;
          break;
        }
        else {
          str1[i] = str[i];
          i++;
        }
      }
      string_area_counter = i + string_area_counter;
      return str1;
    }
    #+end_src

*** jotable_insert

    #+begin_src c
    // -1 denotes the hash_table is filled
    cell jotable_insert(string key) {
      cell orbit_index = jotable_hash(key, 0);
      cell counter = 0;
      while (true) {
        cell index = jotable_hash(key, counter);
        if (!jotable_entry_occured(jotable[index])) {
          key = copy_to_string_area(key);
          jotable[index].key = key;
          jotable[index].orbiton = orbit_index;
          jotable[orbit_index].orbit_length = 1 + counter;
          jotable_counter = 1 + jotable_counter;
          return index;
        }
        else if (jotable_keyeq(key, jotable[index].key)) {
          return index;
        }
        else if (counter == jotable_size) {
          return -1;
        }
        else {
          counter = 1 + counter;
        }
      }
    }
    #+end_src

*** jotable_search

    #+begin_src c
    // -1 denotes key not occured
    cell jotable_search(string key) {
      cell counter = 0;
      while (true) {
        cell index = jotable_hash(key, counter);
        if (!jotable_entry_occured(jotable[index])) {
          return -1;
        }
        else if (jotable_keyeq(key, jotable[index].key)) {
          return index;
        }
        else if (counter == jotable_size) {
          return -1;
        }
        else {
          counter = 1 + counter;
        }
      }
    }
    #+end_src

*** jotable_entry_print

    #+begin_src c
    string jo2str (cell index);

    void jotable_entry_print(jotable_entry entry) {
      printf("%s : ", jo2str(entry.type));
      if (entry.type == str2jo("cell")) {
        printf("%ld", entry.value.cell);
      }
      else if (entry.type == str2jo("primitive")) {
        printf("%ld", entry.value.primitive);
      }
      else if (entry.type == str2jo("jojo")) {
        printf("%ld ", entry.value.jojo.size);
        printf("[ ", entry.value.jojo.size);
        cell i;
        for (i=0; i < entry.value.jojo.size; i=i+1) {
          printf("%ld ", entry.value.jojo.array[i]);
        }
        printf("]", entry.value.jojo.size);
      }
    }
    #+end_src

*** jotable_report_orbit

    #+begin_src c
    void jotable_report_orbit(cell index, cell counter) {
      while (counter < jotable[index].orbit_length) {
        string key = jotable[index].key;
        cell next_index = jotable_hash(key, counter);
        if (index == jotable[next_index].orbiton) {
          printf("  - %ld %s\n", next_index, jotable[next_index].key);
        }
        if (jotable_entry_used(jotable[next_index])) {
          printf("    = ");
          jotable_entry_print(jotable[next_index]);
          printf("\n");
        }
        counter = 1 + counter;
      }
    }
    #+end_src

*** jotable_report

    #+begin_src c
    void jotable_report() {
      printf("\n");
      printf("- jotable_report\n");
      printf("  : <index> <key> // <orbit-length>\n");
      cell index = 0;
      while (index < jotable_size) {
        if (jotable_entry_occured(jotable[index]) &&
            jotable_entry_no_collision(jotable[index])) {
          printf("  - %ld %s // %ld\n",
                 index, jotable[index].key, jotable[index].orbit_length);
          if (jotable_entry_used(jotable[index])) {
            printf("    = ");
            jotable_entry_print(jotable[index]);
            printf("\n");
          }
          jotable_report_orbit(index, 1);
        }
        index = 1 + index;
      }
      printf("  : <index> <key> // <orbit-length>\n");
      printf("\n");
      printf("- used : %ld\n", jotable_counter);
      printf("- free : %ld\n", jotable_size - jotable_counter);
    }
    #+end_src

*** jotable_print

    #+begin_src c
    void jotable_print() {
      printf("\n");
      printf("- jotable_print\n");
      cell index = 0;
      while (index < jotable_size) {
        printf("  - %ld %s %ld // %ld\n",
               index,
               jotable[index].key,
               jotable[index].value,
               jotable[index].orbit_length);
        index = 1 + index;
      }
      printf("\n");
      printf("- used : %ld\n", jotable_counter);
      printf("- free : %ld\n", jotable_size - jotable_counter);
    }
    #+end_src

*** str2jo & jo2str

    #+begin_src c
    jo str2jo(string str) {
      return jotable_insert(str);
    }

    string jo2str(cell index) {
      return jotable[index].key;
    }
    #+end_src

*** init_jotable

    #+begin_src c
    void init_jotable() {
      cell i = 0;
      while (i < jotable_size) {
        jotable[i] = proto_jotable_entry(i);
        i++;
      }
    }
    #+end_src

*** jojo_area

    #+begin_src c
    jo jojo_area[1024 * 1024];
    #+end_src

*** here

***** compiling_stack

      #+begin_src c
      typedef jo* compiling_stack_t[1024];

      compiling_stack_t compiling_stack;
      cell compiling_stack_base = 0;
      cell compiling_stack_pointer = 0;

      void compiling_stack_push(jo* value) {
        compiling_stack[compiling_stack_pointer] = value;
        compiling_stack_pointer++;
      }

      jo* compiling_stack_pop() {
        compiling_stack_pointer--;
        return compiling_stack[compiling_stack_pointer];
      }

      void compiling_stack_inc() {
        compiling_stack[compiling_stack_pointer - 1] =
          compiling_stack[compiling_stack_pointer - 1] + 1;
      }


      jo* compiling_stack_tos() {
        return compiling_stack[compiling_stack_pointer - 1];
      }

      bool compiling_stack_empty_p() {
        return compiling_stack_pointer == compiling_stack_base;
      }
      #+end_src

***** init_compiling_stack

      #+begin_src c
      void init_compiling_stack() {
        compiling_stack_push(jojo_area);
      }
      #+end_src

***** here

      #+begin_src c
      void here(cell n) {
        jo* pointer = compiling_stack_pop();
        pointer[0] = n;
        compiling_stack_push(pointer + 1);
      }
      #+end_src

*** jotable_set_cell

    #+begin_src c
    void jotable_set_cell(cell index, cell cell) {
      jotable[index].type = str2jo("cell");
      jotable[index].value.cell = cell;
    }
    #+end_src

*** jotable_set_primitive

    #+begin_src c
    void jotable_set_primitive(cell index, primitive primitive) {
      jotable[index].type = str2jo("primitive");
      jotable[index].value.primitive = primitive;
    }
    #+end_src

*** jotable_get_cell

    #+begin_src c
    cell jotable_get_cell(cell index) {
      return jotable[index].value.cell;
    }
    #+end_src

*** jotable_get_primitive

    #+begin_src c
    primitive jotable_get_primitive(cell index) {
      return jotable[index].value.primitive;
    }
    #+end_src

*** jotable_get_jojo

    #+begin_src c
    jojo jotable_get_jojo(cell index) {
      return jotable[index].value.jojo;
    }
    #+end_src

*** test

    #+begin_src c
    void jotable_test() {
      str2jo("testkey0");
      str2jo("testkey1");
      str2jo("testkey2");
      str2jo("testkey3");
      str2jo("testkey4");

      str2jo("testkey0");
      str2jo("testkey1");
      str2jo("testkey2");
      str2jo("testkey3");
      str2jo("testkey4");

      str2jo("testtestkey0");
      str2jo("testtestkey1");
      str2jo("testtestkey2");
      str2jo("testtestkey3");
      str2jo("testtestkey4");

      str2jo("testtesttestkey0");
      str2jo("testtesttestkey1");
      str2jo("testtesttestkey2");
      str2jo("testtesttestkey3");
      str2jo("testtesttestkey4");

      str2jo("testtesttesttestkey0");
      str2jo("testtesttesttestkey1");
      str2jo("testtesttesttestkey2");
      str2jo("testtesttesttestkey3");
      str2jo("testtesttesttestkey4");

      jotable_set_cell(str2jo("k1"), 1);
      jotable_report();

      jotable_set_cell(str2jo("k1"), 0);
      jotable_report();

      // jotable_print();
    }
    #+end_src

* defprim

*** defprim_record

    #+begin_src c
    jo defprim_record[64 * 1024];
    cell defprim_record_counter = 0;
    #+end_src

*** defprim_report

    #+begin_src c
    void defprim_report() {
      printf("- defprim_report :\n");
      cell i = 0;
      while (i < defprim_record_counter) {
        printf("  %s\n", jo2str(defprim_record[i]));
        i++;
      }
    }
    #+end_src

*** defprim

    #+begin_src c
    void defprim(string str, primitive fun) {
      jo index = str2jo(str);
      defprim_record[defprim_record_counter] = index;
      defprim_record_counter++;
      defprim_record[defprim_record_counter] = 0;
      jotable_set_primitive(index, fun);
    }
    #+end_src

* as & rs

*** as

    #+begin_src c
    typedef cell argument_stack[1024 * 4];

    argument_stack as;
    cell as_base = 64;
    cell as_pointer = 64;

    void as_push(cell value) {
      as[as_pointer] = value;
      as_pointer++;
    }

    cell as_pop() {
      as_pointer--;
      return as[as_pointer];
    }
    #+end_src

*** rs

    #+begin_src c
    typedef jo* return_stack[1024 * 4];

    return_stack rs;
    cell rs_base = 64;
    cell rs_pointer = 64;

    void rs_push(jo* value) {
      rs[rs_pointer] = value;
      rs_pointer++;
    }

    jo* rs_pop() {
      rs_pointer--;
      return rs[rs_pointer];
    }
    #+end_src

* apply

*** apply

    - be careful when calling this function in primitive
      because after rs_push a jojo
      one need to exit current primitive to run the jojo

    #+begin_src c
    void apply(jo jo) {
      if (!jotable_entry_used(jotable[jo])) {
        printf("undefined jo : %s\n", jo2str(jo));
        return;
      }
      cell jo_type = jotable[jo].type;
      if (jo_type == str2jo("primitive")) {
        primitive primitive = jotable_get_primitive(jo);
        primitive();
      }
      else if (jo_type == str2jo("jojo")) {
        jojo jojo = jotable_get_jojo(jo);
        rs_push(jojo.array);
      }
      else if (jo_type == str2jo("cell")) {
        cell cell = jotable_get_cell(jo);
        as_push(cell);
      }
    }
    #+end_src

*** p_apply

    #+begin_src c
    void p_apply() {
      apply(as_pop());
    }
    #+end_src

* eval

*** eval

    #+begin_src c
    jmp_buf jmp_buffer;

    bool exit_eval() {
      longjmp(jmp_buffer, 666);
    }

    void eval() {
      if (666 == setjmp(jmp_buffer)) {
        return;
      }
      else {
        cell rs_base = rs_pointer;
        while (rs_pointer >= rs_base) {
          jo* function_body = rs_pop();
          rs_push(function_body + 1);
          cell jo = *(cell*)function_body;
          apply(jo);
        }
      }
    }
    #+end_src

*** eval_jo

    #+begin_src c
    void eval_jo(jo jo) {
      cell jo_type = jotable[jo].type;
      if (jo_type == str2jo("primitive")) {
        primitive primitive = jotable_get_primitive(jo);
        primitive();
      }
      else if (jo_type == str2jo("jojo")) {
        jojo jojo = jotable_get_jojo(jo);
        rs_push(jojo.array);
        eval();
      }
      else if (jo_type == str2jo("cell")) {
        cell cell = jotable_get_cell(jo);
        as_push(cell);
      }
    }
    #+end_src

*** eval_key

    #+begin_src c
    void eval_key(jo jo) {
      if (!jotable_entry_used(jotable[jo])) {
        printf("undefined keyword : %s\n", jo2str(jo));
        k_ignore();
        return;
      }
      eval_jo(jo);
    }
    #+end_src

*** eval_jojo

    #+begin_src c
    void eval_jojo(jo* array) {
      rs_push(array);
      eval();
    }
    #+end_src

* *stack_operation*

*** p_drop

    #+begin_src c
    void p_drop() {
      // (a ->)
      as_pop();
    }
    #+end_src

*** p_dup

    #+begin_src c
    void p_dup() {
      // (a a -> a)
      cell a = as_pop();
      as_push(a);
      as_push(a);
    }
    #+end_src

*** p_over

    #+begin_src c
    void p_over() {
      // (a b -> a b a)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a);
      as_push(b);
      as_push(a);
    }
    #+end_src

*** p_tuck

    #+begin_src c
    void p_tuck() {
      // (a b -> b a b)
      cell b = as_pop();
      cell a = as_pop();
      as_push(b);
      as_push(a);
      as_push(b);
    }
    #+end_src

*** p_swap

    #+begin_src c
    void p_swap() {
      // (a b -> b a)
      cell b = as_pop();
      cell a = as_pop();
      as_push(b);
      as_push(a);
    }
    #+end_src

*** p_print_stack

    #+begin_src c
    void p_print_stack() {
      // ([io] ->)
      printf("\n");
      if (as_pointer < as_base) {
        printf("  * %ld *  ", (as_pointer - as_base));
        printf("-- below the stack --\n");
      }
      else {
        printf("  * %ld *  ", (as_pointer - as_base));
        printf("-- ");
        cell i = as_base;
        while (i < as_pointer) {
          printf("%ld ", as[i]);
          i++;
        }
        printf("--\n");
      }
    }
    #+end_src

*** p_stack_base

    #+begin_src c
    void p_stack_base() {
      as_push(as + as_base);
    }
    #+end_src

*** p_stack_pointer

    #+begin_src c
    void p_stack_pointer() {
      as_push(as + as_pointer);
    }
    #+end_src

*** export_stack_operation

    #+begin_src c
    void export_stack_operation() {
      defprim("drop", p_drop);
      defprim("dup", p_dup);
      defprim("over", p_over);
      defprim("tuck", p_tuck);
      defprim("swap", p_swap);
      defprim("print-stack", p_print_stack);
      defprim("stack-pointer", p_stack_pointer);
      defprim("stack-base", p_stack_base);
    }
    #+end_src

* *ending*

*** p_end

    #+begin_src c
    void p_end() {
      // (rs: addr ->)
      rs_pop();
    }
    #+end_src

*** p_bye

    #+begin_src c
    void p_bye() {
      // (-> [exit])
      printf("bye bye ^-^/\n");
      exit_eval();
    }
    #+end_src

*** export_ending

    #+begin_src c
    void export_ending() {
      defprim("end", p_end);
      defprim("bye", p_bye);
    }
    #+end_src

* *control*

*** p_jump_back

    #+begin_src c
    void p_jump_back() {
      // (offset -> [rs])
      jo* function_body = rs_pop();
      rs_push(function_body - as_pop());
    }
    #+end_src

*** p_jump_over

    #+begin_src c
    void p_jump_over() {
      // (offset -> [rs])
      jo* function_body = rs_pop();
      rs_push(function_body + as_pop());
    }
    #+end_src

*** i_lit

    #+begin_src c
    void i_lit() {
      // ([rs] -> int)
      jo* function_body = rs_pop();
      rs_push(function_body + 1);
      cell jo = *(cell*)function_body;
      as_push(jo);
    }
    #+end_src

*** i_tail_call

    #+begin_src c
    void i_tail_call() {
      // ([rs] -> int)
      jo* function_body = rs_pop();
      cell jo = *(cell*)function_body;
      apply(jo);
    }
    #+end_src

*** p_jump_if_false

    #+begin_src c
    void p_jump_if_false() {
      // (bool addr -> [rs])
      jo* a = as_pop();
      cell b = as_pop();
      if (b == 0) {
        rs_pop();
        rs_push(a);
      }
    }
    #+end_src

*** export_control

    #+begin_src c
    void export_control() {
      defprim("jump-back", p_jump_back);
      defprim("jump-over", p_jump_over);
      defprim("i-lit", i_lit);
      defprim("i-tail-call", i_tail_call);
      defprim("jump-if-false", p_jump_if_false);
    }
    #+end_src

* *bool*

*** p_true

    #+begin_src c
    void p_true() {
      as_push(1);
    }
    #+end_src

*** p_false

    #+begin_src c
    void p_false() {
      as_push(0);
    }
    #+end_src

*** p_not

    #+begin_src c
    void p_not() {
      // (bool -> bool)
      cell a = as_pop();
      as_push(!a);
    }
    #+end_src

*** export_bool

    #+begin_src c
    void export_bool() {
      defprim("true", p_true);
      defprim("false", p_false);
      defprim("not", p_not);
    }
    #+end_src

* *integer*

*** p_add

    #+begin_src c
    void p_add() {
      // (cell cell -> int)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a + b);
    }
    #+end_src

*** p_sub

    #+begin_src c
    void p_sub() {
      // (cell cell -> int)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a - b);
    }
    #+end_src

*** p_mul

    #+begin_src c
    void p_mul() {
      // (cell cell -> int)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a * b);
    }
    #+end_src

*** p_div

    #+begin_src c
    void p_div() {
      // (cell cell -> int)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a / b);
    }
    #+end_src

*** p_mod

    #+begin_src c
    void p_mod() {
      // (cell cell -> int)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a % b);
    }
    #+end_src

*** p_eq_p

    #+begin_src c
    void p_eq_p() {
      // (cell cell -> bool)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a == b);
    }
    #+end_src

*** p_gt_p

    #+begin_src c
    void p_gt_p() {
      // (cell cell -> bool)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a > b);
    }
    #+end_src

*** p_lt_p

    #+begin_src c
    void p_lt_p() {
      // (cell cell -> bool)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a < b);
    }
    #+end_src

*** p_gteq_p

    #+begin_src c
    void p_gteq_p() {
      // (cell cell -> bool)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a >= b);
    }
    #+end_src

*** p_lteq_p

    #+begin_src c
    void p_lteq_p() {
      // (cell cell -> bool)
      cell b = as_pop();
      cell a = as_pop();
      as_push(a <= b);
    }
    #+end_src

*** k_integer

    #+begin_src c
    jo read_jo();

    void k_integer() {
      // ([io] -> [compile])
      while (true) {
        jo s = read_jo();
        if (s == str2jo(")")) {
          break;
        }
        else if (int_string_p(jo2str(s))) {
          here(str2jo("i-lit"));
          here(atoi(jo2str(s)));
        }
        else {
          printf("meet non-cell string in (# ...) : %s", jo2str(s));
          break;
        }
      }
    }
    #+end_src

*** p_print_integer

    #+begin_src c
    void p_print_integer() {
      // (cell -> [io])
      printf("%ld", as_pop());
    }
    #+end_src

*** p_dot

    #+begin_src c
    void p_dot() {
      // (cell -> [io])
      printf("%ld ", as_pop());
    }
    #+end_src

*** export_integer

    #+begin_src c
    void export_integer() {
      defprim("add", p_add);
      defprim("sub", p_sub);

      defprim("mul", p_mul);
      defprim("div", p_div);
      defprim("mod", p_mod);

      defprim("neg", p_not);

      defprim("eq?", p_eq_p);
      defprim("gt?", p_gt_p);
      defprim("lt?", p_lt_p);
      defprim("gteq?", p_gteq_p);
      defprim("lteq?", p_lteq_p);

      defprim("#", k_integer);

      defprim("print-integer", p_print_integer);
      defprim("dot", p_dot);
    }
    #+end_src

* *memory*

*** p_allocate

    #+begin_src c
    void p_allocate () {
      // (size -> addr)
      as_push(calloc(as_pop(), 1));
    }
    #+end_src

*** p_free

    #+begin_src c
    void p_free () {
      // (addr ->)
      free(as_pop());
    }
    #+end_src

*** k_var

    #+begin_src c
    void k_var() {
      // ([io] -> [compile])
      here(str2jo("i-lit"));
      jo index = read_jo();
      here(&(jotable[index].value.cell));
      k_ignore();
    }
    #+end_src

*** p_set

    #+begin_src c
    void p_set() {
      // (cell addr ->)
      cell* address = as_pop();
      cell value = as_pop();
      address[0] = value;
    }
    #+end_src

*** p_get

    #+begin_src c
    void p_get() {
      // (addr -> cell)
      cell* address = as_pop();
      as_push(address[0]);
    }
    #+end_src

*** export_memory

    #+begin_src c
    void export_memory() {
      defprim("allocate", p_allocate);
      defprim("free", p_free);
      defprim("var", k_var);
      defprim("set", p_set);
      defprim("get", p_get);
    }
    #+end_src

* read_char

*** reading_stack

    #+begin_src c
    typedef FILE* reading_stack_t[64];

    reading_stack_t reading_stack;
    cell reading_stack_base = 0;
    cell reading_stack_pointer = 0;

    void reading_stack_push(FILE* value) {
      reading_stack[reading_stack_pointer] = value;
      reading_stack_pointer++;
    }

    FILE* reading_stack_pop() {
      reading_stack_pointer--;
      return reading_stack[reading_stack_pointer];
    }

    FILE* reading_stack_tos() {
      return reading_stack[reading_stack_pointer - 1];
    }

    bool reading_stack_empty_p() {
      return reading_stack_pointer == reading_stack_base;
    }
    #+end_src

*** loading_stack

    - a hook for read_jo

    #+begin_src c
    typedef struct {
      jo nick;
      jo name;
    } alias;

    typedef alias* loading_stack_t[64];

    loading_stack_t loading_stack;
    cell loading_stack_base = 0;
    cell loading_stack_pointer = 0;

    void loading_stack_push(alias* value) {
      loading_stack[loading_stack_pointer] = value;
      loading_stack_pointer++;
    }

    alias* loading_stack_pop() {
      loading_stack_pointer--;
      return loading_stack[loading_stack_pointer];
    }

    alias* loading_stack_tos() {
      return loading_stack[loading_stack_pointer - 1];
    }

    bool loading_stack_empty_p() {
      return loading_stack_pointer == loading_stack_base;
    }

    cell alias_record_size = 1024;

    void init_loading_stack() {
      alias record[alias_record_size];
      alias a = {.nick = 0, .name = 0};
      record[0] = a;
      loading_stack_push(record);
    }
    #+end_src

*** read_char

    #+begin_src c
    char read_char() {
      if (reading_stack_empty_p()) {
        return fgetc(stdin);
      }
      else {
        char c = fgetc(reading_stack_tos());
        if (c == EOF) {
          fclose(reading_stack_pop());
          loading_stack_pop();
          return read_char();
        }
        else {
          return c;
        }
      }
    }
    #+end_src

*** unread_char

    #+begin_src c
    void unread_char(char c) {
      if (reading_stack_empty_p()) {
        ungetc(c, stdin);
      }
      else {
        ungetc(c, reading_stack_tos());
      }
    }
    #+end_src

* *jo*

*** alias_add

    #+begin_src c
    void alias_add(jo nick, jo name) {
      alias* alias_record = loading_stack_tos();
      cell i = 0;
      while (i < alias_record_size) {
        if (alias_record[i].nick == 0 &&
            alias_record[i].name == 0) {
          alias_record[i].nick = nick;
          alias_record[i].name = name;
          alias_record[i+1].nick = 0;
          alias_record[i+1].name = 0;
          return;
        }
        else {
          i++;
        }
      }
      printf("alias_add fail alias_record is full\n");
    }
    #+end_src

*** alias_find

    #+begin_src c
    jo alias_find(jo nick) {
      // return 0 -- not found
      alias* alias_record = loading_stack_tos();
      cell i = 0;
      while (true) {
        if (alias_record[i].nick == 0 &&
            alias_record[i].name == 0) {
          return 0;
        }
        else if (alias_record[i].nick == nick) {
          return alias_record[i].name;
        }
        else {
          i++;
        }
      }
    }
    #+end_src

*** read_jo

    #+begin_src c
    jo read_jo() {
      // ([io] -> jo)
      char buf[1024];
      cell cur = 0;
      cell collecting = false;
      char c;
      char go = true;
      while (go) {
        c = read_char();
        if (!collecting) {
          if (isspace(c)) {
            // do nothing
          }
          else {
            collecting = true;
            buf[cur] = c;
            cur++;
            if (isbarcket(c)) {
              go = false;
            }
          }
        }
        else {
          if (isbarcket(c) ||
              isspace(c)) {
            unread_char(c);
            go = false;
          }
          else {
            buf[cur] = c;
            cur++;
          }
        }
      }
      buf[cur] = 0;
      jo jo0 = str2jo(buf);
      jo jo1 = alias_find(jo0);
      if (jo1 != 0) {
        return jo1;
      }
      else {
        return jo0;
      }
    }
    #+end_src

*** cat_jo

    #+begin_src c
    jo cat_jo(jo x, jo y) {
      char str[1024];
      str[0] = 0;
      strcat(str, jo2str(x));
      strcat(str, jo2str(y));
      return str2jo(str);
    }
    #+end_src

*** p_read_jo

    #+begin_src c
    void p_read_jo() {
      as_push(read_jo());
    }
    #+end_src

*** p_jo_used_p

    #+begin_src c
    void p_jo_used_p() {
      // (jo -> bool)
      jo jo = as_pop();
      as_push(jotable_entry_used(jotable[jo]));
    }
    #+end_src

*** p_jo_to_string

    #+begin_src c
    void p_jo_to_string() {
      // (jo -> string)
      jo jo = as_pop();
      as_push(jo2str(jo));
    }
    #+end_src

*** export_jo

    #+begin_src c
    void export_jo() {
      defprim("read-jo", p_read_jo);
      defprim("jo-used?", p_jo_used_p);
      defprim("jo->string", p_jo_to_string);
    }
    #+end_src

* *string*

*** k_string

    #+begin_src c
    void k_string() {
      // ([io] -> [compile])
      while (true) {
        jo s = read_jo();
        if (s == str2jo(")")) {
          return;
        }
        else if (s == str2jo("(")) {
          k_one_string();
        }
        else {
          // do nothing
        }
      }
    }

    void k_one_string() {
      // ([io] -> [compile])
      char buffer[1024 * 1024];
      cell cursor = 0;
      while (true) {
        char c = read_char();
        if (c == ')') {
          buffer[cursor] = 0;
          cursor++;
          break;
        }
        else {
          buffer[cursor] = c;
          cursor++;
        }
      }
      string str = malloc(cursor);
      strcpy(str, buffer);
      here(str2jo("i-lit"));
      here(str);
    }
    #+end_src

*** p_print_string

    #+begin_src c
    void p_print_string() {
      // (string -> [io])
      printf("%s", as_pop());
    }
    #+end_src

*** export_string

    #+begin_src c
    void export_string() {
      defprim("string", k_string);
      defprim("print-string", p_print_string);
    }
    #+end_src

* *file*

*** p_read_file

    #+begin_src c
    void p_read_file() {
      // (string addr number -> number)
      cell limit = as_pop();
      cell buffer = as_pop();
      cell path = as_pop();
      FILE* fp = fopen(path, "r");
      if(!fp) {
        perror("p_read_file file to open file");
        return EXIT_FAILURE;
      }
      cell readed_counter = fread(buffer, 1, limit, fp);
      fclose(fp);
      as_push(readed_counter);
    }
    #+end_src

*** file_readable_p

    #+begin_src c
    bool file_readable_p(string path) {
      FILE* fp = fopen(path, "r");
      if (!fp) {
        return false;
      }
      else {
        fclose(fp);
        return true;
      }
    }
    #+end_src

*** export_file

    #+begin_src c
    void export_file() {
      defprim("read-file", p_read_file);
    }
    #+end_src

* *keyword*

*** k_ignore

    #+begin_src c
    void k_ignore() {
      // ([io] ->)
      while (true) {
        jo s = read_jo();
        if (s == str2jo("(")) {
          k_ignore();
        }
        if (s == str2jo(")")) {
          break;
        }
      }
    }
    #+end_src

*** k_if

***** note

      - (if a b p? -> c d)

      - a b p?
        [jump] jumk_if_false
        c d
        :jump

      - because the use of as_snapshot
        bar can not be nested in antecedent

***** compile_question

      #+begin_src c
      void compile_question() {
        // ([io] -> [compile])
        while (true) {
          jo s = read_jo();
          if (s == str2jo("(")) {
            eval_key(read_jo());
          }
          else if (s == str2jo("->")) {
            break;
          }
          else {
            here(s);
          }
        }
      }
      #+end_src

***** compile_answer

      #+begin_src c
      void compile_answer() {
        // ([io] -> [compile])
        here(str2jo("i-lit"));
        cell* offset_place = compiling_stack_tos();
        compiling_stack_inc();
        here(str2jo("jump-if-false"));
        while (true) {
          jo s = read_jo();
          if (s == str2jo("(")) {
            eval_key(read_jo());
          }
          else if (s == str2jo(")")) {
            break;
          }
          else {
            here(s);
          }
        }
        offset_place[0] = compiling_stack_tos();
      }
      #+end_src

***** k_if

      #+begin_src c
      void k_if() {
        // ([io] -> [compile])
        compile_question();
        compile_answer();
      }
      #+end_src

*** k_else

    #+begin_src c
    void k_else() {
      // ([io] -> [compile])
      here(str2jo("i-lit"));
      here(true);
      compile_answer();
    }
    #+end_src

*** k_tail_call

    #+begin_src c
    void k_tail_call() {
      // ([io] -> [compile])
      here(str2jo("i-tail-call"));
      jo s = read_jo();
      here(s);
      k_ignore();
    }
    #+end_src

*** export_keyword

    #+begin_src c
    void export_keyword() {
      defprim(":", k_ignore);
      defprim("note", k_ignore);
      defprim("if", k_if);
      defprim("else", k_else);
      defprim("tail-call", k_tail_call);
    }
    #+end_src

* *system*

*** p_getcwd

    #+begin_src c
    void p_getcwd() {
      // (-> string)
      char buf[1024];
      as_push(getcwd(buf, 1024));
    }
    #+end_src

*** export_system

    #+begin_src c
    void export_system() {
      defprim("getcwd", p_getcwd);
    }
    #+end_src

* *module*

*** user_module_path

    #+begin_src c
    string user_module_path = "/home/xyh/.jojo/module/";
    #+end_src

*** system_module_path

    #+begin_src c
    string system_module_path = "";
    #+end_src

*** module_stack

    - just record what modules are loaded
      and their meta-data :
      - path

    #+begin_src c
    typedef struct {
      jo name;
      string path;
    } module;

    typedef module module_stack_t[1024];

    module_stack_t module_stack;
    cell module_stack_base = 0;
    cell module_stack_pointer = 0;

    void module_stack_push(module value) {
      module_stack[module_stack_pointer] = value;
      module_stack_pointer++;
    }

    module module_stack_tos() {
      return module_stack[module_stack_pointer - 1];
    }


    bool module_stack_empty_p() {
      return module_stack_pointer == module_stack_base;
    }

    bool module_stack_find(jo name) {
      cell i = 0;
      while (i < module_stack_pointer) {
        if (name == module_stack[i].name) {
          return true;
        }
        else {
          // do nothing
        }
      }
      return false;
    }
    #+end_src

*** load_file

    #+begin_src c
    void load_file(string path) {
      FILE* fp = fopen(path, "r");
      if(!fp) {
        perror("File opening failed");
        printf("load_file fail : %s\n", path);
        return EXIT_FAILURE;
      }
      reading_stack_push(fp);
      alias record[alias_record_size];
      alias a = {.nick = 0, .name = 0};
      record[0] = a;
      loading_stack_push(record);
    }
    #+end_src

*** find_module

    #+begin_src c
    string find_module(jo name) {
      // return 0 -- not found
      char path[1024];
      getcwd(path, 1024);
      strcat(path, "/");
      strcat(path, jo2str(name));
      strcat(path, ".jo");
      if (file_readable_p(path)) {
        return copy_to_string_area(path);
      }
      else {
        return 0;
      }
    }
    #+end_src

*** load_module

    #+begin_src c
    bool load_module(jo name) {
      string path = find_module(name);
      if (path == 0) {
        return false;
      }
      load_file(path);
      module m = {
        .name = name,
        .path = path
      };
      module_stack_push(m);
      return true;
    }
    #+end_src

*** k_import

***** k_add_alias

      #+begin_src c
      void k_add_alias(jo prefix) {
        // ([io] -> [loading_stack])
        while (true) {
          jo s = read_jo();
          if (s == str2jo(")")) {
            return;
          }
          else if (s == str2jo("(")) {
            eval_key(read_jo());
          }
          if (!alias_find(s) == 0) {
            printf("k_add_alias fail, alias used : %s\n", jo2str(s));
            k_ignore();
            return;
          }
          else {
            char str[1024];
            str[0] = 0;
            strcat(str, jo2str(prefix));
            strcat(str, "/");
            strcat(str, jo2str(s));
            alias_add(s, str2jo(str));
          }
        }
      }
      #+end_src

***** k_one_module

      #+begin_src c
      void k_one_module() {
        // ([io] -> [loading_stack])
        jo name = read_jo();
        if (!module_stack_find(name)) {
          if(!load_module(name)) {
            printf("k_one_module fail to load module : %s\n", jo2str(name));
            k_ignore();
          }
        }
        k_add_alias(name);
      }
      #+end_src

***** k_import

      #+begin_src c
      void k_import() {
        // ([io] -> [loading_stack])
        while (true) {
          jo s = read_jo();
          if (s == str2jo(")")) {
            return;
          }
          else if (s == str2jo("(")) {
            k_one_module();
          }
          else {
            // do nothing
          }
        }
      }
      #+end_src

*** export_module

    #+begin_src c
    void export_module() {
      defprim("import", k_import);
    }
    #+end_src

* *ffi*

*** get_clib

    #+begin_src c
    void* get_clib(string path) {
      void* lib = dlopen(path, RTLD_LAZY);
      if (lib == NULL) {
        printf("fail to open library : %s : %s\n",
               path, dlerror());
      };
      return lib;
    }
    #+end_src

*** ccall

    #+begin_src c
    void ccall (string str, void* lib) {
      primitive fun = dlsym(lib, str);
      if (fun == NULL) {
        printf("can not find %s function lib : %s\n",
               str, dlerror());
      };
      fun();
    }
    #+end_src

*** k_clib

    #+begin_src c
    void k_clib() {
      // ([io] -> [compile])
      while (true) {
        jo s = read_jo();
        if (s == str2jo(")")) {
          return;
        }
        else if (s == str2jo("(")) {
          k_one_clib();
        }
        else {
          // do nothing
        }
      }
    }

    void k_one_clib() {
      // ([io] -> [compile])
      char buffer[1024];
      cell cursor = 0;
      while (true) {
        char c = read_char();
        if (c == ')') {
          buffer[cursor] = 0;
          cursor++;
          break;
        }
        else {
          buffer[cursor] = c;
          cursor++;
        }
      }
      ccall("export", get_clib(buffer));
    }
    #+end_src

*** export_ffi

    #+begin_src c
    void export_ffi() {
      defprim("clib", k_clib);
    }
    #+end_src

* *top_level*

*** read_alias_jo

    #+begin_src c
    jo read_alias_jo() {
      jo alias_jo = read_jo();
      if (module_stack_empty_p()) {
        return alias_jo;
      }
      else {
        jo new_jo = cat_jo(cat_jo(module_stack_tos().name,
                                         str2jo("/")),
                                  alias_jo);
        alias_add(alias_jo, new_jo);
        return new_jo;
      }
    }
    #+end_src

*** defun_record

    #+begin_src c
    jo defun_record[64 * 1024];
    cell defun_record_counter = 0;
    #+end_src

*** k_defun

    #+begin_src c
    void k_defun() {
      // ([io] -> [compile] [jotable])
      jo index = read_alias_jo();
      defun_record[defun_record_counter] = index;
      defun_record_counter++;
      defun_record[defun_record_counter] = 0;
      jo* array = compiling_stack_tos();
      while (true) {
        jo s = read_jo();
        if (s == str2jo("(")) {
          eval_key(read_jo());
        }
        else if (s == str2jo(")")) {
          here(str2jo("end"));
          break;
        }
        else {
          here(s);
        }
      }
      jotable[index].type = str2jo("jojo");
      jotable[index].value.jojo.size = compiling_stack_tos() - array;
      jotable[index].value.jojo.array = array;
    }
    #+end_src

*** >< k_declare

    #+begin_src c
    void k_declare() {

    }
    #+end_src

*** k_run

    #+begin_src c
    void k_run() {
      // ([io] -> *)
      jo array[64 * 1024];
      compiling_stack_push(array);
      while (true) {
        jo s = read_jo();
        if (s == str2jo("(")) {
          eval_key(read_jo());
        }
        else if (s == str2jo(")")) {
          here(str2jo("end"));
          break;
        }
        else {
          here(s);
        }
      }
      compiling_stack_pop();
      eval_jojo(array);
    }
    #+end_src

*** defvar_record

    #+begin_src c
    jo defvar_record[64 * 1024];
    cell defvar_record_counter = 0;
    #+end_src

*** p_defvar_record

    #+begin_src c
    void p_defvar_record() {
      // (-> addr)
      as_push(defvar_record);
    }
    #+end_src

*** k_defvar

    #+begin_src c
    void k_defvar() {
      // ([io] -> [compile] [jotable])
      jo index = read_alias_jo();
      defvar_record[defvar_record_counter] = index;
      defvar_record_counter++;
      defvar_record[defvar_record_counter] = 0;
      k_run();
      jotable_set_cell(index, as_pop());
    }
    #+end_src

*** p_top_repl

    #+begin_src c
    void p_top_repl() {
      // ([io] -> *)
      while (true) {
        jo s = read_jo();
        if (s == str2jo("(")) {
          eval_key(read_jo());
        }
        else {
          // do nothing
        }
      }
    }
    #+end_src

*** export_top_level

    #+begin_src c
    void export_top_level() {
      defprim("defun", k_defun);
      defprim("declare", k_declare);
      defprim("run", k_run);
      defprim("defvar", k_defvar);
      defprim("defvar-record", p_defvar_record);
      defprim("top-repl", p_top_repl);
    }
    #+end_src

* *misc*

*** do_nothing

    #+begin_src c
    void do_nothing() {
    }
    #+end_src

*** p_round_bar

    #+begin_src c
    void p_round_bar() {
      // (-> cell)
      as_push(str2jo("("));
    }
    #+end_src

*** p_cell_size

    #+begin_src c
    void p_cell_size() {
      // (-> cell)
      as_push(sizeof(cell));
    }
    #+end_src

*** p_newline

    #+begin_src c
    void p_newline() {
      printf("\n");
    }
    #+end_src

*** export_mise

    #+begin_src c
    void export_mise() {
      defprim("apply", p_apply);
      defprim("jotable-report", jotable_report);
      defprim("round-bar", p_round_bar);
      defprim("cell-size", p_cell_size);
      defprim("defprim-report", defprim_report);
      defprim("newline", p_newline);
    }
    #+end_src

* *play*

*** p1

    #+begin_src c
    void p1() {
      printf("k1: %ld %ld\n", sizeof(void*), sizeof(intptr_t));
    }
    #+end_src

*** p2

    #+begin_src c
    void p2() {

    }
    #+end_src

*** p3

    #+begin_src c
    void p3() {

    }
    #+end_src

*** export_play

    #+begin_src c
    void export_play() {
      defprim("p1", p1);
      defprim("p2", p2);
      defprim("p3", p3);
    }
    #+end_src

* epilog

*** run_basic_repl

    #+begin_src c
    void run_basic_repl() {
      init_jotable();
      init_compiling_stack();
      init_loading_stack();

      export_stack_operation();
      export_ending();
      export_control();
      export_integer();
      export_memory();
      export_jo();
      export_string();
      export_file();
      export_bool();
      export_keyword();
      export_system();
      export_module();
      export_ffi();
      export_top_level();
      export_mise();
      export_play();

      p_top_repl();
    }
    #+end_src

*** main

    #+begin_src c
    int main(int argc, string* argv) {
      if (argc == 1) {
        run_basic_repl();
      }
      else {
        load_file(argv[1]);
        run_basic_repl();
      }
    }
    #+end_src
