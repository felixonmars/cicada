#+title: vector

* vector-u

  #+begin_src jojo
  (+union vector-u : (-> nat-u type-tt -- type-tt)
    (-> -- zero-c :t vector-u)
    (-> .car : :t
        .cdr : [:n :t vector-u]
     -- :n succ-c :t vector-u))
  #+end_src

* append

  #+begin_src jojo
  (+fun append
    : (-> l0 : [:m :t vector-u]
          l1 : [:n :t vector-u]
       -- :m :n add :t vector-u)
    (case l1
      (null-t l0)
      (cons-t l1.car l0 l1.cdr recur cons-c)))
  #+end_src

* map

  #+begin_src jojo
  (+fun map
    : (-> l : [:n :t1 vector-u]
          fun : (-> :t1 -- :t2)
       -- :n :t2 vector-u)
    (case l
      (null-t null-c)
      (cons-t l.car fun :l.cdr {fun} recur cons-c)))
  #+end_src
