#+title: vector

* vector-u

  #+begin_src cicada
  (+union vector-u
    : (-> length : nat-u
          type : type-tt
       -- type-tt)
    (-> -- zero-c type vector-u)
    (-> car : type
        cdr : [length type vector-u]
     -- length succ-c type vector-u))
  #+end_src

* append

  #+begin_src cicada
  (+fun append
    : (-> l0 : [:m :type vector-u]
          l1 : [:n :type vector-u]
       -- :m :n add :type vector-u)
    (case l1
      (null-t l0)
      (cons-t l1.car l0 l1.cdr recur cons-c)))
  #+end_src

* map

  #+begin_src cicada
  (+fun map
    : (-> l : [:n :type1 vector-u]
          fun : (-> :type1 -- :type2)
       -- :n :type2 vector-u)
    (case l
      (null-t null-c)
      (cons-t l.car fun l.cdr {fun} recur cons-c)))
  #+end_src
