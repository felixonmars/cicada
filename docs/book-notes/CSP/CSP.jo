(+jojo stop drop 'bleep)

(note process == (-> :event -- process))

(+jojo prefix (-> :event :process -- process)
  {(-> :x -- process)
   (if [:x :event eq?]
       :process
       'bleep)})

(+jojo choice2 (-> :event1 :process1 :event2 :process2 -- process)
  {(-> :x -- process)
   (cond [:event1 :x eq?] :process1
         [:event2 :x eq?] :process2
         else 'bleep)})

(+jojo CT (note counter)
  (-> :n -- process)
  (cond [:n 0 eq?]
        ['up {1 CT apply}
         'around {0 CT apply}
         choice2]
        else
        ['up {:n inc CT apply}
         'down {:n dec CT apply}
         choice2]))

(note
  (+jojo CT
    (-> :n <nat> -- <process>)
    (cond [:n 0 eq?]
          (| up [1 CT]
             around [0 CT])
          else
          (| up [:n inc CT]
             down [:n dec CT]))))

(+jojo menu (-> :alphabet-list :process -- first-event-list)
  (cond [:alphabet-list null?] null

        [:alphabet-list .car :process apply 'bleep eq?]
        [:alphabet-list .cdr :process menu]

        else [:alphabet-list .car
              :alphabet-list .cdr :process menu
              cons]))

(note
  (begin
    '(up down around)
    0 CT
    menu p)
  (begin
    '(up down around)
    2 CT
    menu p))

(import sys)
(+jojo readline sys .stdin -1 swap .readline)

(+jojo interact
  (-> :alphabet-list :process --)
  :alphabet-list :process menu p nl
  readline :string!
  (when [:string 'end eq? not]
    [:string :process apply :next!
     (cond [:next 'bleep eq?]
           ['bleep p nl :alphabet-list :process interact]
           else [:alphabet-list :next interact])]))

(note
  (begin
    '(up down around)
    0 CT
    interact))

(+jojo VMS (note vending-machine/simple)
  'coin 'choc {VMS apply}
  prefix
  prefix)

(begin
  '(coin choc)
  VMS
  interact)
