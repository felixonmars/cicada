#+html_head: <link rel="stylesheet" href="../../css/org-page.css"/>
#+property: tangle CSP.jo
#+title: Communicating Sequential Processes

- by C. A. R. Hoare

* 1 Processes

*** 1.1  Introduction

    - the word 'process' stand for
      the behaviour pattern of an object,
      insofar as it can be described
      in terms of the limited set of events
      selected as its alphabet.

    - prefix -
      (x : event) (P : process)
      (x -> P) -- pronounced "x then P"

      - x -
        #+begin_src jojo
        (+process CLOCK (- tick CLOCK))
        (+process VMS (- coin choc VMS))
        #+end_src

    - choice -
      (x -> P | y -> Q)
      The bar | should be pronounced "choice"
      "x then P choice y then Q"

      - x -
        #+begin_src jojo
        (+process CH5C
          (- in5p
             (| out1p [out1p out1p out2p CH5C]
                out2p [out1p out2p CH5C])))

        (+process VMCT
          (- coin
             (| choc VMCT
                toffee VMCT)))

        (+process VMC
          (note WARNING: do not insert three pennies in a row.)
          (| in2p (| large VMC
                     small [out1p VMC])
             in1p (| small VMC
                     in1p (| large VMC
                             in1p STOP))))

        (+process COPYBIT
          (| in.0 [out.0 COPYBIT]
             in.1 [out.1 COPYBIT]))

        (note (process (|)) == STOP)

        (+jojo CT (-> :n <nat> -- <process>)
          (cond [:n 0 eq?]
                (| up [1 CT]
                   around [0 CT])
                else
                (| up [:n inc CT]
                   down [:n dec CT])))
        #+end_src

*** 1.2  Pictures

*** 1.3  Laws

*** 1.4  Implementation of processes

    #+begin_src jojo
    (+jojo stop drop 'bleep)

    (note process == (-> :event -- process))

    (+jojo prefix (-> :event :process -- process)
      {(-> :x -- process)
       (if :x :event eq?
           then :process
           else 'bleep)})

    (+jojo choice2 (-> :event1 :process1 :event2 :process2 -- process)
      {(-> :x -- process)
       (cond [:event1 :x eq?] :process1
             [:event2 :x eq?] :process2
             else 'bleep)})

    (+jojo CT (note counter)
      (-> :n -- process)
      (cond [:n 0 eq?]
            ['up {1 CT apply}
             'around {0 CT apply}
             choice2]
            else
            ['up {:n inc CT apply}
             'down {:n dec CT apply}
             choice2]))

    (note
      (+jojo CT
        (-> :n <nat> -- <process>)
        (cond [:n 0 eq?]
              (| up [1 CT]
                 around [0 CT])
              else
              (| up [:n inc CT]
                 down [:n dec CT]))))

    (+jojo menu (-> :alphabet-list :process -- first-event-list)
      (cond [:alphabet-list null?] null

            [:alphabet-list .car :process apply 'bleep eq?]
            [:alphabet-list .cdr :process recur]

            else [:alphabet-list .car
                  :alphabet-list .cdr :process recur
                  cons]))

    (note
      (run
        '(up down around)
        0 CT
        menu w)
      (run
        '(up down around)
        2 CT
        menu w))

    (+jojo interact
      (-> :alphabet-list :process --)
      :alphabet-list :process menu w nl
      read-jo :jo!
      (if :jo 'end eq? then end)
      :jo :process apply :next!
      (cond [:next 'bleep eq?]
            ['bleep w nl :alphabet-list :process recur]
            else [:alphabet-list :next recur]))

    (note
      (run
        '(up down around)
        0 CT
        interact))

    (+jojo VMS (note vending-machine/simple)
      'coin 'choc {VMS apply}
      prefix
      prefix)

    (run
      '(coin choc)
      VMS
      interact)
    #+end_src

*** 1.5  Traces

*** 1.6  Operations on traces

*** 1.7  Implementation of traces

*** 1.8  Traces of a process

*** 1.9  More operations on traces

*** 1.10 Specifications

* 2 concurrency

*** 2.1  introduction

    - composition of processes.

*** 2.2  intersection

    - ><

*** 2.3  Concurrency

*** 2.4  Pictures

*** 2.5  Example: The Dining Philosophers

*** 2.6  Change of symbol

*** 2.7  Specifications

*** 2.8  Mathematical theory of deterministic processes

* 3 Nondeterminism

*** 3.1  Introduction

*** 3.2  Nondeterministic or

*** 3.3  General choice

*** 3.4  Refusals

*** 3.5  Concealment

*** 3.6  Interleaving

*** 3.7  Specifications

*** 3.8  Divergence

*** 3.9  Mathematical theory of non-deterministic processes

* 4 Communication

*** 4.1  Introduction

*** 4.2  Input and output

*** 4.3  Communications

*** 4.4  Pipes

*** 4.5  Subordination

* 5 Sequential Processes

*** 5.1  Introduction

*** 5.2  Laws

*** 5.3  Mathematical treatment

*** 5.4  Interrupts

*** 5.5  Assignment

* 6 Shared Resources

*** 6.1  Introduction

*** 6.2  Sharing by interleaving

*** 6.3  Shared storage

*** 6.4  Multiple resources

*** 6.5  Operating systems

*** 6.6  Scheduling

* 7 Discussion

*** 7.1  Introduction

*** 7.2  Shared storage

*** 7.3  Communication

*** 7.4  Mathematical models
