* *bit*

*** p_true_bit

    #+begin_src c
    void p_true_bit() {
      // -> cell
      cell i = -1;
      data_stack_push(i);
    }
    #+end_src

*** p_false_bit

    #+begin_src c
    void p_false_bit() {
      // -> cell
      data_stack_push(0);
    }
    #+end_src

*** p_bit_and

    #+begin_src c
    void p_bit_and() {
      // cell cell -> cell
      cell b = data_stack_pop();
      cell a = data_stack_pop();
      data_stack_push(a&b);
    }
    #+end_src

*** p_bit_or

    #+begin_src c
    void p_bit_or() {
      // cell cell -> cell
      cell b = data_stack_pop();
      cell a = data_stack_pop();
      data_stack_push(a|b);
    }
    #+end_src

*** p_bit_xor

    #+begin_src c
    void p_bit_xor() {
      // cell cell -> cell
      cell b = data_stack_pop();
      cell a = data_stack_pop();
      data_stack_push(a^b);
    }
    #+end_src

*** p_bit_not

    #+begin_src c
    void p_bit_not() {
      // cell -> cell
      cell a = data_stack_pop();
      data_stack_push(~a);
    }
    #+end_src

*** p_bit_shift_left

    #+begin_src c
    void p_bit_shift_left() {
      // cell step -> cell
      cell s = data_stack_pop();
      cell a = data_stack_pop();
      data_stack_push(a<<s);
    }
    #+end_src

*** note shift_right & arithmetic_shift_right

    - must not use >> because its meaning is not sure in c

*** expose_bit

    #+begin_src c
    void expose_bit() {
      define_prim("true/bit", p_true_bit);
      define_prim("false/bit", p_false_bit);
      define_prim("bit/not", p_bit_not);
      define_prim("bit/and", p_bit_and);
      define_prim("bit/xor", p_bit_xor);
      define_prim("bit/or", p_bit_or);
      define_prim("bit/shift-left", p_bit_shift_left);
      // define_prim("bit/shift-right", p_bit_shift_right);
      // define_prim("bit/arithmetic-shift-right", p_bit_arithmetic_shift_right);
    }
    #+end_src
