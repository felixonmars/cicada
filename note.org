#+title:  note of jojo

* <list>

  #+begin_src jojo
  (+class <list> [<object>]
    empty-p
    car cdr)

  (+fun cons [:cdr <list> :car <object>]
    <list> new :l!
    false :l .empty-p!
    :cdr :l .cdr!
    :car :l .car!
    :l)

  (+fun empty-list []
    <list> new :l!
    true :l .empty-p!
    :l)

  (+fun empty? [:l <list>]
    :l .empty-p)

  (+var x
    empty-list
    1 cons
    2 cons)

  (+ x .cdr .cdr empty?)

  (note
    uninitialised-field
    (+ x .cdr .cdr .car))

  (note
    generic_jo fail
    (+ 0 1 cons))
  #+end_src

* [test] <closure>

  #+begin_src jojo
  (+fun t0 []
    1 :a! 2 :b! (clo :a :b add))
  (+var x0 t0)
  (+ x0)


  (+fun t1 []
    1 :a! 2 :b! (clo :a (clo :b)))
  (+var x1 t1)
  (+ x1)
  (+var x2 1)
  (+ x2! x2)
  #+end_src

* [test] *control*

  #+begin_src jojo
  (+fun t2 []
    (if 1 eq? then 111 end)
    222)

  (+ 1 t2 w)
  (+ 2 t2 w)


  (+fun l0 [:x <int>]
    (if :x 0 eq? then end)
    (el :x w " " w :x dec (loop)))

  (+ 1000 l0)

  (+fun l1 [:x <int>]
    (if :x 0 eq? then end)
    (el :x w " " w :x dec (recur)))

  (+ 1000 l1)
  #+end_src

* ><

  #+begin_src jojo
  (+class <rectangle> [<object>]
    height width)

  (+class <color-rectangle> [<rectangle>]
    cyan magenta yellow)

  (+fun map [:list <list> :jojo <jojo>]
    (if :list null eq? then null end)
    (el :list cdr :jojo (recur) :list car :jojo apply cons))

  (+fun repeat [:time <int> :jojo <jojo>]
    (if :time 0 eq? then end)
    (el :jojo apply :time dec :jojo (loop)))


  (+class <person> [<object>]
    [age 13]
    [language "chinese"])

  (+fun grow [:p <person>]
    :p.age inc
    :p.age!)

  (+fun report [:p <person>]
    "age : " w :p.age w nl
    "languege : " w :p.language w nl
    nl)

  (+var xieyuheng <person> new)

  (+ xieyuheng report
     xieyuheng grow
     xieyuheng report
     xieyuheng 10 grow-by
     xieyuheng report
     xieyuheng 10 grow-by
     xieyuheng report)

  (+var stack-0 <stack> new)

  (+ stack-0 1 push
     stack-0 2 push
     stack-0 3 push
     stack-0 pop w
     stack-0 pop w
     stack-0 pop w)
  #+end_src

* ><

*** c

    #+begin_src c
    typedef enum {
      GC_IGNORE,
      GC_CLEANER,
      GC_RECUR,
    } gc_type;
    // typedef void (* cleaner__t)(cell);

    struct class {
      jo class_name;
      jo super_name;
      gc_type gc_type;
      // cleaner__t cleaner;
      cell object_size;
    };
    #+end_src

*** jojo

    #+begin_src jojo
    (defenum <gc-type>
      GC-IGNORE
      GC-CLEANER
      GC-RECUR)

    (defstruct <class>
      [<jo> class-name]
      [<jo> super-name]
      [<gc-type> gc-type]
      [<cell> object-size])
    #+end_src
