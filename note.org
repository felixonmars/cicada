#+title:  note of jojo

* <cons>

  #+begin_src jojo
  (+class <cons> (<object>)
    car cdr)

  (+fun cons (:c <object> :o <object>)
    <cons> new :c1!
    :c :c1 .cdr!
    :o :c1 .car!
    :c1)

  (+var x
    0
    1 cons
    2 cons)

  (run
    x .cdr .cdr)
  #+end_src

* ><

  #+begin_src jojo
  (+class <rectangle> (<object>)
    height width)

  (+class <color-rectangle> (<rectangle>)
    cyan magenta yellow)

  (+fun map (:list <list> :jojo <jojo>)
    (if :list null eq? then null end)
    (el :list cdr :jojo (recur)
        :list car :jojo apply cons))

  (+fun repeat (:time <int> :jojo <jojo>)
    (if :time 0 eq? then end)
    (el :jojo apply
        :time dec :jojo (loop)))



  (+class <person> (<object>)
    [age 13]
    [language "chinese"]
    (:meta-variable
     [testing-meta-variable 666]))

  (+fun grow (:p <person>)
    :p.age inc
    :p.age!)

  (+fun report (:p <person>)
    "age : " w :p.age w nl
    "languege : " w :p.language w nl
    nl)

  (+var xieyuheng <person> new)

  (run
    xieyuheng report
    xieyuheng grow
    xieyuheng report
    xieyuheng 10 grow-by
    xieyuheng report
    xieyuheng 10 grow-by
    xieyuheng report)

  (+var stack-0 <stack> new)

  (run
    stack-0 1 push
    stack-0 2 push
    stack-0 3 push
    stack-0 pop w
    stack-0 pop w
    stack-0 pop w)
  #+end_src

* ><

*** c

    #+begin_src c
    typedef enum {
      GC_IGNORE,
      GC_CLEANER,
      GC_RECUR,
    } gc_type;
    // typedef void (* cleaner__t)(cell);

    struct class {
      jo class_name;
      jo super_name;
      gc_type gc_type;
      // cleaner__t cleaner;
      cell object_size;
    };
    #+end_src

*** jojo

    #+begin_src jojo
    (defenum <gc-type>
      GC-IGNORE
      GC-CLEANER
      GC-RECUR)

    (defstruct <class>
      [<jo> class-name]
      [<jo> super-name]
      [<gc-type> gc-type]
      [<cell> object-size])
    #+end_src
